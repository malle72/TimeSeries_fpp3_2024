splits=ttsplit(p,Crashes_w_hwy)
Train <- splits$Train
Test <- splits$Test
# ==== Model Fits ====
print(paste0("Working on p=",p))
fit_full <- Train |>
model(naive = NAIVE(dn_crashes),
snaive = SNAIVE(dn_crashes),
drift = RW(dn_crashes ~ drift()),
tslm_base = TSLM(dn_crashes ~ trend() + season()),
tslm_inter = TSLM(dn_crashes ~ trend() + season() + trend() * season() + home + covid + icePresent),
tslm_vars = TSLM(dn_crashes ~ trend() + season() + home + covid + holiday + icePresent),
arima_plain = ARIMA(dn_crashes, stepwise = TRUE),
arima_full = ARIMA(dn_crashes ~ trend() + season() + home + covid + holiday + icePresent, stepwise = TRUE),
arima_sdif = ARIMA(dn_crashes ~ PDQ(0,0,0) + trend() + season() + home + covid + holiday, stepwise = TRUE),
nn_base = NNETAR(dn_crashes, n_networks = 10),
nn_vars = NNETAR(dn_crashes~ home + covid + holiday + icePresent, n_networks = 10)
)
Mod_List[[as.character(p)]] <- as.list(fit_full)
# ==== Model Evaluation ====
glance(fit_full) |> arrange(AICc) |> select(.model:BIC)
accuracy(fit_full)
for_full <- fit_full |> forecast(Test)
ac_full <- accuracy(for_full,Test) |> arrange(RMSE)
ac_full=ac_full|>mutate(P=p)
Ac_List[[i]]=ac_full|>select(.model,RMSE,P)
write.csv(ac_full,paste0("./Results/Accuracies/Denoised_Ad/Hwy_",hwy,"/TTsp_",p,".csv"))
print(paste0("Finished p=",p))
}
ttsplit(0.05,Crashes_w_hwy)$Train
ttsplit(0.05,Crashes_w_hwy)$Train$dn_crashes
ttsplit(0.10,Crashes_w_hwy)$Train$dn_crashes
# ==== Train-Test Split ====
p = 0.05
k = round(nrow(crashes_w_hwy)*p)
l=nrow(crashes_w_hwy)-k
train = crashes_w_hwy[1:l,]
test = crashes_w_hwy[(l+1):nrow(crashes_w_hwy),]
k = round(nrow(Crashes_w_hwy)*p)
l=nrow(Crashes_w_hwy)-k
train = Crashes_w_hwy[1:l,]
test = Crashes_w_hwy[(l+1):nrow(Crashes_w_hwy),]
# ======== Model Fit - Neural Net ========
fit_nn <- train |>
model(nn_base = NNETAR(dn_crashes))
glance(fit_nn) |> arrange(AICc) |> select(.model:BIC)
glance(fit_nn)
fit_nn |>
forecast(test) |>
autoplot(bind_rows(train,test),level=NULL)  # plot with full data
# ======== Model Fit - Neural Net ========
fit_nn <- train |>
model(nn_base = NNETAR(dn_crashes,n_networks = 10))
# -=-=-=- Forecast and Test -=-=-=-
fit_nn |>
forecast(test) |>
autoplot(train,level=NULL)  # plot ahead from training
# ==== Train-Test Split ====
p = 0.10
k = round(nrow(Crashes_w_hwy)*p)
l=nrow(Crashes_w_hwy)-k
train = Crashes_w_hwy[1:l,]
test = Crashes_w_hwy[(l+1):nrow(Crashes_w_hwy),]
freq=365.25
# ======== Model Fit - Neural Net ========
fit_nn <- train |>
model(nn_base = NNETAR(dn_crashes,n_networks = 10))
# -=-=-=- Forecast and Test -=-=-=-
fit_nn |>
forecast(test) |>
autoplot(train,level=NULL)  # plot ahead from training
P=seq(0.10,0.3,0.05)
Ac_List=list()
Mod_List=list()
for (i in (1:length(P))){
p = P[i]
splits=ttsplit(p,Crashes_w_hwy)
Train <- splits$Train
Test <- splits$Test
# ==== Model Fits ====
print(paste0("Working on p=",p))
fit_full <- Train |>
model(naive = NAIVE(dn_crashes),
snaive = SNAIVE(dn_crashes),
drift = RW(dn_crashes ~ drift()),
tslm_base = TSLM(dn_crashes ~ trend() + season()),
tslm_inter = TSLM(dn_crashes ~ trend() + season() + trend() * season() + home + covid + icePresent),
tslm_vars = TSLM(dn_crashes ~ trend() + season() + home + covid + holiday + icePresent),
arima_plain = ARIMA(dn_crashes, stepwise = TRUE),
arima_full = ARIMA(dn_crashes ~ trend() + season() + home + covid + holiday + icePresent, stepwise = TRUE),
arima_sdif = ARIMA(dn_crashes ~ PDQ(0,0,0) + trend() + season() + home + covid + holiday, stepwise = TRUE),
nn_base = NNETAR(dn_crashes, n_networks = 10),
nn_vars = NNETAR(dn_crashes~ home + covid + holiday + icePresent, n_networks = 10)
)
Mod_List[[as.character(p)]] <- as.list(fit_full)
# ==== Model Evaluation ====
glance(fit_full) |> arrange(AICc) |> select(.model:BIC)
accuracy(fit_full)
print(paste0("Forecasting p=",p))
for_full <- fit_full |> forecast(Test)
ac_full <- accuracy(for_full,Test) |> arrange(RMSE)
ac_full=ac_full|>mutate(P=p)
Ac_List[[i]]=ac_full|>select(.model,RMSE,P)
write.csv(ac_full,paste0("./Results/Accuracies/Denoised_Ad/Hwy_",hwy,"/TTsp_",p,".csv"))
print(paste0("Finished p=",p))
}
Combined_tibble <- bind_rows(Ac_List)|> rename(
Model = .model,
Proportion = P
)|>mutate(
Group = case_when(
Model %in% c("nn_base", "nn_vars") ~ "Neural Networks",
Model %in% c("arima_full", "arima_plain", "arima_sdif") ~ "ARIMA",
Model %in% c("tslm_base", "tslm_inter", "tslm_vars") ~ "Regression",
Model %in% c("drift", "naive", "snaive") ~ "Baseline",
TRUE ~ "Other"
)
) |>
mutate(Group = factor(Group, levels = c("Neural Networks", "ARIMA", "Regression", "Baseline")))|>
mutate(Model = factor(Model, levels = c(
"nn_base", "nn_vars",
"arima_full", "arima_plain", "arima_sdif",
"tslm_base", "tslm_inter", "tslm_vars",
"drift", "naive", "snaive"
)))
custom_colors <- c(
"nn_base" = "#1f77b4", "nn_vars" = "#74a9cf",
"arima_full" = "#31a354", "arima_plain" = "#74c476", "arima_sdif" = "#a1d99b",
"tslm_base" = "#ffcc00", "tslm_inter" = "#ffdd55", "tslm_vars" = "#ffee99",
"drift" = "#de2d26", "naive" = "#fc9272", "snaive" = "#fcbba1"
)
min_rmse_points <- Combined_tibble |>
group_by(Proportion) |>
slice_min(order_by = RMSE, n = 1) |>
ungroup()
p1=ggplot(Combined_tibble, aes(x = Proportion, y = RMSE, color = Model)) +
geom_point(size = 3) +
geom_line(size = 1) +
geom_point(data = min_rmse_points, aes(x = Proportion, y = RMSE),
shape = 4, size = 4, color = "black", inherit.aes = FALSE) +
geom_text(data = min_rmse_points, aes(x = Proportion, y = RMSE, label = sprintf("%.2f", RMSE)),
vjust = -0.5, color = "black", inherit.aes = FALSE) +
scale_color_manual(values = custom_colors) +
scale_x_continuous(
breaks = unique(Combined_tibble$Proportion)
) +
facet_wrap(~ Group, scales = "free", ncol = 1) +
labs(
title = "RMSE by Train-Test Split Proportion",
subtitle = "Grouped by Model Type",
x = "Percentage of Test",
y = "Root Mean Square Error (RMSE)",
color = "Model"
) +
guides(
color = guide_legend(
ncol = 1,
byrow = TRUE,
title = "Model Types",
override.aes = list(size = 4)
)
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
p1
graph_save(p1,"RMSE_vs_proportion",paste0("./Results/Graphs/RMSE/Crash_Denoised_STL_hwy_",hwy))
Combined_tibble <- bind_rows(Ac_List)|> rename(
Model = .model,
Proportion = P
)|>mutate(
Group = case_when(
Model %in% c("nn_base", "nn_vars") ~ "Neural Networks",
Model %in% c("arima_full", "arima_plain", "arima_sdif") ~ "ARIMA",
Model %in% c("tslm_base", "tslm_inter", "tslm_vars") ~ "Regression",
Model %in% c("drift", "naive", "snaive") ~ "Baseline",
TRUE ~ "Other"
)
) |>
mutate(Group = factor(Group, levels = c("Neural Networks", "ARIMA", "Regression", "Baseline")))|>
mutate(Model = factor(Model, levels = c(
"nn_base", "nn_vars",
"arima_full", "arima_plain", "arima_sdif",
"tslm_base", "tslm_inter", "tslm_vars",
"drift", "naive", "snaive"
)))
custom_colors <- c(
"nn_base" = "#1f77b4", "nn_vars" = "#74a9cf",
"arima_full" = "#31a354", "arima_plain" = "#74c476", "arima_sdif" = "#a1d99b",
"tslm_base" = "#ffcc00", "tslm_inter" = "#ffdd55", "tslm_vars" = "#ffee99",
"drift" = "#de2d26", "naive" = "#fc9272", "snaive" = "#fcbba1"
)
min_rmse_points <- Combined_tibble |>
group_by(Proportion) |>
slice_min(order_by = RMSE, n = 1) |>
ungroup()
p1=ggplot(Combined_tibble, aes(x = Proportion, y = RMSE, color = Model)) +
geom_point(size = 3) +
geom_line(size = 1) +
geom_point(data = min_rmse_points, aes(x = Proportion, y = RMSE),
shape = 4, size = 4, color = "black", inherit.aes = FALSE) +
geom_text(data = min_rmse_points, aes(x = Proportion, y = RMSE, label = sprintf("%.2f", RMSE)),
vjust = -0.5, color = "black", inherit.aes = FALSE) +
scale_color_manual(values = custom_colors) +
scale_x_continuous(
breaks = unique(Combined_tibble$Proportion)
) +
facet_wrap(~ Group, scales = "free", ncol = 1) +
labs(
title = "RMSE by Train-Test Split Proportion",
subtitle = "Grouped by Model Type",
x = "Percentage of Test",
y = "Root Mean Square Error (RMSE)",
color = "Model"
) +
guides(
color = guide_legend(
ncol = 1,
byrow = TRUE,
title = "Model Types",
override.aes = list(size = 4)
)
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
p1
graph_save(p1,"RMSE_vs_proportion",paste0("./Results/Graphs/RMSE/Crash_Denoised_Ad_hwy_",hwy))
for (p in names(Mod_List)) {
cat("Processing p=",p," models \n")
for (mod in names(Mod_List[[p]])) {
cat("  - Processing model:", mod, "\n")
curr_model <- Mod_List[[p]][[mod]]
curr_resid_graph <- curr_model |> gg_tsresiduals() + labs(title=paste(mod,'Residuals'), subtitle=paste0("Denoised Additive ",'(p=',p,")"))
graph_save(graph=curr_resid_graph,
graph_name=paste0("Residuals",p,mod),
graph_path=paste0("./Results/Graphs/Residuals/Crash_Denoised_Ad_hwy_",hwy,"/"))
}
}
Mod_List[["0.2"]][["arima_plain"]]
Mod_List[["0.2"]]
Mod_List[["0.2"]][["arima_plain"]] |> gg_tsresiduals()
Mod_List[["0.2"]][["arima_plain"]] |> mable() |> gg_tsresiduals()
Mod_List[["0.2"]] |> mable() |> gg_tsresiduals()
fit_tslm_3a <- train |>
model(tslm_base = TSLM(crashCount ~ trend() + season()),
tslm_inter = TSLM(crashCount ~ trend() + season() + trend() * season() + home + covid + icePresent),
tslm_vars = TSLM(crashCount ~ trend() + season() + home + covid + holiday + icePresent)
)
Crashes_w_hwy=read.csv(paste0("./Data/Preprocessed/Crash_hwy_",hwy,"_Full.csv"))|>
mutate(Week = yearweek(Week)) |>
as_tsibble(index = Week, key = HighwayClass)|>filter(!is.na(dn_crashes))
P=seq(0.05,0.3,0.05)
Ac_List=list()
Mod_List=list()
for (i in (1:length(P))){
p = P[i]
splits=ttsplit(p,Crashes_w_hwy)
Train <- splits$Train
Test <- splits$Test
# ==== Model Fits ====
print(paste0("Working on p=",p))
fit_full <- Train |>
model(naive = NAIVE(dn_crashes),
snaive = SNAIVE(dn_crashes),
drift = RW(dn_crashes ~ drift()),
tslm_base = TSLM(dn_crashes ~ trend() + season()),
tslm_inter = TSLM(dn_crashes ~ trend() + season() + trend() * season() + home + covid + icePresent),
tslm_vars = TSLM(dn_crashes ~ trend() + season() + home + covid + holiday + icePresent),
# arima_plain = ARIMA(dn_crashes, stepwise = TRUE),
# arima_full = ARIMA(dn_crashes ~ trend() + season() + home + covid + holiday + icePresent, stepwise = TRUE),
# arima_sdif = ARIMA(dn_crashes ~ PDQ(0,0,0) + trend() + season() + home + covid + holiday, stepwise = TRUE),
# nn_base = NNETAR(dn_crashes, n_networks = 10),
# nn_vars = NNETAR(dn_crashes~ home + covid + holiday + icePresent, n_networks = 10)
)
Mod_List[[as.character(p)]] <- fit_full
# ==== Model Evaluation ====
glance(fit_full) |> arrange(AICc) |> select(.model:BIC)
accuracy(fit_full)
print(paste0("Forecasting p=",p))
for_full <- fit_full |> forecast(Test)
ac_full <- accuracy(for_full,Test) |> arrange(RMSE)
ac_full=ac_full|>mutate(P=p)
Ac_List[[i]]=ac_full|>select(.model,RMSE,P)
write.csv(ac_full,paste0("./Results/Accuracies/Denoised_Ad/Hwy_",hwy,"/TTsp_",p,".csv"))
print(paste0("Finished p=",p))
}
for (p in names(Mod_List)) {
cat("Processing p=",p," models \n")
for (mod in names(Mod_List[[p]])) {
cat("  - Processing model:", mod, "\n")
curr_model <- Mod_List[[p]] |> select(mod)
curr_resid_graph <- curr_model |> gg_tsresiduals() + labs(title=paste(mod,'Residuals'), subtitle=paste0("Denoised Additive ",'(p=',p,")"))
graph_save(graph=curr_resid_graph,
graph_name=paste0("Residuals",p,mod),
graph_path=paste0("./Results/Graphs/Residuals/Crash_Denoised_Ad_hwy_",hwy,"/"))
}
}
for (p in names(Mod_List)) {
if(p==hwy) next
cat("Processing p=",p," models \n")
for (mod in names(Mod_List[[p]])) {
cat("  - Processing model:", mod, "\n")
curr_model <- Mod_List[[p]] |> select(mod)
curr_resid_graph <- curr_model |> gg_tsresiduals() + labs(title=paste(mod,'Residuals'), subtitle=paste0("Denoised Additive ",'(p=',p,")"))
graph_save(graph=curr_resid_graph,
graph_name=paste0("Residuals",p,mod),
graph_path=paste0("./Results/Graphs/Residuals/Crash_Denoised_Ad_hwy_",hwy,"/"))
}
}
for (p in names(Mod_List)) {
cat("Processing p=",p," models \n")
for (mod in names(Mod_List[[p]])) {
if(mod==hwy) next
cat("  - Processing model:", mod, "\n")
curr_model <- Mod_List[[p]] |> select(mod)
curr_resid_graph <- curr_model |> gg_tsresiduals() + labs(title=paste(mod,'Residuals'), subtitle=paste0("Denoised Additive ",'(p=',p,")"))
graph_save(graph=curr_resid_graph,
graph_name=paste0("Residuals",p,mod),
graph_path=paste0("./Results/Graphs/Residuals/Crash_Denoised_Ad_hwy_",hwy,"/"))
}
}
rlang::last_trace()
cat("  - Processing model:", mod, "\n")}}
for (p in names(Mod_List)) {
cat("Processing p=",p," models \n")
for (mod in names(Mod_List[[p]])) {
if(mod==hwy) next
cat("  - Processing model:", mod, "\n")
}
}
for (p in names(Mod_List)) {
cat("Processing p=",p," models \n")
for (mod in names(Mod_List[[p]])) {
if(mod==hwy) next
cat("  - Processing model:", mod, "\n")
curr_model <- Mod_List[[p]]
cat(curr_model)
}
}
for (p in names(Mod_List)) {
cat("Processing p=",p," models \n")
for (mod in names(Mod_List[[p]])) {
if(mod==hwy) next
cat("  - Processing model:", mod, "\n")
curr_model <- Mod_List[[p]]
print(curr_model)
}
}
for (p in names(Mod_List)) {
cat("Processing p=",p," models \n")
for (mod in names(Mod_List[[p]])) {
if(mod==hwy) next
cat("  - Processing model:", mod, "\n")
curr_model <- Mod_List[[p]][mod]
print(curr_model)
}
}
for (p in names(Mod_List)) {
cat("Processing p=",p," models \n")
for (mod in names(Mod_List[[p]])) {
if(mod==hwy) next
cat("  - Processing model:", mod, "\n")
curr_model <- Mod_List[[p]] |> select(mod)
print(curr_model)
}
}
for (p in names(Mod_List)) {
cat("Processing p=",p," models \n")
for (mod in names(Mod_List[[p]])) {
if(mod=='HighwayClass') next
cat("  - Processing model:", mod, "\n")
curr_model <- Mod_List[[p]] |> select(mod)
print(curr_model)
}
}
for (p in names(Mod_List)) {
cat("Processing p=",p," models \n")
for (mod in names(Mod_List[[p]])) {
if(mod=='HighwayClass') next
cat("  - Processing model:", mod, "\n")
curr_model <- Mod_List[[p]] |> select(mod)
curr_resid_graph <- curr_model |> gg_tsresiduals() + labs(title=paste(mod,'Residuals'), subtitle=paste0("Denoised Additive ",'(p=',p,")"))
graph_save(graph=curr_resid_graph,
graph_name=paste0("Residuals",p,mod),
graph_path=paste0("./Results/Graphs/Residuals/Crash_Denoised_Ad_hwy_",hwy,"/"))
}
}
for (i in (1:length(P))){
p = P[i]
splits=ttsplit(p,Crashes_w_hwy)
Train <- splits$Train
Test <- splits$Test
# ==== Model Fits ====
print(paste0("Working on p=",p))
fit_full <- Train |>
model(naive = NAIVE(dn_crashes),
snaive = SNAIVE(dn_crashes),
drift = RW(dn_crashes ~ drift()),
tslm_base = TSLM(dn_crashes ~ trend() + season()),
tslm_inter = TSLM(dn_crashes ~ trend() + season() + trend() * season() + home + covid + icePresent),
tslm_vars = TSLM(dn_crashes ~ trend() + season() + home + covid + holiday + icePresent),
arima_plain = ARIMA(dn_crashes, stepwise = TRUE),
arima_full = ARIMA(dn_crashes ~ trend() + season() + home + covid + holiday + icePresent, stepwise = TRUE),
arima_sdif = ARIMA(dn_crashes ~ PDQ(0,0,0) + trend() + season() + home + covid + holiday, stepwise = TRUE),
nn_base = NNETAR(dn_crashes, n_networks = 10),
nn_vars = NNETAR(dn_crashes~ home + covid + holiday + icePresent, n_networks = 10)
)
Mod_List[[as.character(p)]] <- fit_full
# ==== Model Evaluation ====
glance(fit_full) |> arrange(AICc) |> select(.model:BIC)
accuracy(fit_full)
print(paste0("Forecasting p=",p))
for_full <- fit_full |> forecast(Test)
ac_full <- accuracy(for_full,Test) |> arrange(RMSE)
ac_full=ac_full|>mutate(P=p)
Ac_List[[i]]=ac_full|>select(.model,RMSE,P)
write.csv(ac_full,paste0("./Results/Accuracies/Denoised_Ad/Hwy_",hwy,"/TTsp_",p,".csv"))
print(paste0("Finished p=",p))
}
Combined_tibble <- bind_rows(Ac_List)|> rename(
Model = .model,
Proportion = P
)|>mutate(
Group = case_when(
Model %in% c("nn_base", "nn_vars") ~ "Neural Networks",
Model %in% c("arima_full", "arima_plain", "arima_sdif") ~ "ARIMA",
Model %in% c("tslm_base", "tslm_inter", "tslm_vars") ~ "Regression",
Model %in% c("drift", "naive", "snaive") ~ "Baseline",
TRUE ~ "Other"
)
) |>
mutate(Group = factor(Group, levels = c("Neural Networks", "ARIMA", "Regression", "Baseline")))|>
mutate(Model = factor(Model, levels = c(
"nn_base", "nn_vars",
"arima_full", "arima_plain", "arima_sdif",
"tslm_base", "tslm_inter", "tslm_vars",
"drift", "naive", "snaive"
)))
custom_colors <- c(
"nn_base" = "#1f77b4", "nn_vars" = "#74a9cf",
"arima_full" = "#31a354", "arima_plain" = "#74c476", "arima_sdif" = "#a1d99b",
"tslm_base" = "#ffcc00", "tslm_inter" = "#ffdd55", "tslm_vars" = "#ffee99",
"drift" = "#de2d26", "naive" = "#fc9272", "snaive" = "#fcbba1"
)
min_rmse_points <- Combined_tibble |>
group_by(Proportion) |>
slice_min(order_by = RMSE, n = 1) |>
ungroup()
p1=ggplot(Combined_tibble, aes(x = Proportion, y = RMSE, color = Model)) +
geom_point(size = 3) +
geom_line(size = 1) +
geom_point(data = min_rmse_points, aes(x = Proportion, y = RMSE),
shape = 4, size = 4, color = "black", inherit.aes = FALSE) +
geom_text(data = min_rmse_points, aes(x = Proportion, y = RMSE, label = sprintf("%.2f", RMSE)),
vjust = -0.5, color = "black", inherit.aes = FALSE) +
scale_color_manual(values = custom_colors) +
scale_x_continuous(
breaks = unique(Combined_tibble$Proportion)
) +
facet_wrap(~ Group, scales = "free", ncol = 1) +
labs(
title = "RMSE by Train-Test Split Proportion",
subtitle = "Grouped by Model Type",
x = "Percentage of Test",
y = "Root Mean Square Error (RMSE)",
color = "Model"
) +
guides(
color = guide_legend(
ncol = 1,
byrow = TRUE,
title = "Model Types",
override.aes = list(size = 4)
)
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
p1
graph_save(p1,"RMSE_vs_proportion",paste0("./Results/Graphs/RMSE/Crash_Denoised_Ad_hwy_",hwy))
for (p in names(Mod_List)) {
cat("Processing p=",p," models \n")
for (mod in names(Mod_List[[p]])) {
if(mod=='HighwayClass') next
cat("  - Processing model:", mod, "\n")
curr_model <- Mod_List[[p]] |> select(mod)
curr_resid_graph <- curr_model |> gg_tsresiduals() + labs(title=paste(mod,'Residuals'), subtitle=paste0("Denoised Additive ",'(p=',p,")"))
graph_save(graph=curr_resid_graph,
graph_name=paste0("Residuals",p,mod),
graph_path=paste0("./Results/Graphs/Residuals/Crash_Denoised_Ad_hwy_",hwy,"/"))
}
}
save.image("C:/Users/malle72/projects/TimeSeries_fpp3_2024/2024_Project_Crashes/RData.RData")
