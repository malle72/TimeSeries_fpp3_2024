"arima_full" = "#31a354", "arima_plain" = "#74c476", "arima_sdif" = "#a1d99b",
"tslm_base" = "#ffcc00", "tslm_inter" = "#ffdd55", "tslm_vars" = "#ffee99",
"drift" = "#de2d26", "naive" = "#fc9272", "snaive" = "#fcbba1"
)
custom_colors <- c(
"nn_base" = "#1f77b4", "nn_vars" = "#74a9cf",
"arima_full" = "#31a354", "arima_plain" = "#74c476", "arima_no_comp" = "#a1d99b",
"tslm_base" = "#ffcc00", "tslm_inter" = "#ffdd55", "tslm_vars" = "#ffee99", "tslm_vars_no_comp" = "#ffff00",
"drift" = "#de2d26", "naive" = "#fc9272", "snaive" = "#fcbba1"
)
min_rmse_points <- Combined_tibble |>
group_by(Proportion) |>
slice_min(order_by = RMSE, n = 1) |>
ungroup()
p1=ggplot(Combined_tibble, aes(x = Proportion, y = RMSE, color = Model)) +
geom_point(size = 3) +
geom_line(size = 1) +
geom_point(data = min_rmse_points, aes(x = Proportion, y = RMSE),
shape = 4, size = 4, color = "black", inherit.aes = FALSE) +
geom_text(data = min_rmse_points, aes(x = Proportion, y = RMSE, label = sprintf("%.2f", RMSE)),
vjust = -0.5, color = "black", inherit.aes = FALSE) +
scale_color_manual(values = custom_colors) +
scale_x_continuous(
breaks = unique(Combined_tibble$Proportion)
) +
facet_wrap(~ Group, scales = "free", ncol = 1) +
labs(
title = "RMSE by Train-Test Split Proportion",
subtitle = "Grouped by Model Type",
x = "Percentage of Test",
y = "Root Mean Square Error (RMSE)",
color = "Model"
) +
guides(
color = guide_legend(
ncol = 1,
byrow = TRUE,
title = "Model Types",
override.aes = list(size = 4)
)
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
p1
graph_save(p1,"RMSE_vs_proportion",paste0("./Results/Graphs/RMSE/Crash_Denoised_STL_hwy_",hwy))
#=================== Loading Packages and Data, Setting paths ==========================
library(easypackages)
libraries("urca","fpp3","tidyverse")
Crashes_w_hwy |>
PACF(crashCount) |>
autoplot()
Crashes_w_hwy |>
ACF(crashCount) |>
autoplot()
for (p in names(Mod_List_stl_dn)) {
cat("Processing p=",p," models \n")
for (mod in names(Mod_List_stl_dn[[p]])) {
if(mod=='HighwayClass') next
cat("  - Processing model:", mod, "\n")
curr_model <- Mod_List_stl_dn[[p]] |> select(mod)
curr_model |> augment() |>
features(.innov,ljung_box)
}
}
for (p in names(Mod_List_stl_dn)) {
cat("Processing p=",p," models \n")
for (mod in names(Mod_List_stl_dn[[p]])) {
if(mod=='HighwayClass') next
cat("  - Processing model:", mod, "\n")
curr_model <- Mod_List_stl_dn[[p]] |> select(mod)
print(curr_model |> augment() |> features(.innov,ljung_box))
}
}
for (p in names(Mod_List_stl_dn)) {
cat("Processing p =", p, "models \n")
for (mod in names(Mod_List_stl_dn[[p]])) {
if (mod == "HighwayClass") next
cat("  - Processing model:", mod, "\n")
# Select the current model
curr_model <- Mod_List_stl_dn[[p]] |> select(mod)
# Compute residual features
residual_features <- curr_model |>
augment() |>
features(.innov, ljung_box) |>
mutate(p = p, .model = mod)  # Add the "p" and ".model" columns to the result
# Append to the main tibble
residuals_tibble <- dplyr::bind_rows(residuals_tibble, residual_features)
}
}
# Initialize an empty tibble to store results
residuals_tibble <- tibble::tibble(p = character(), .model = character(), .feature = character(), .value = numeric())
for (p in names(Mod_List_stl_dn)) {
cat("Processing p =", p, "models \n")
for (mod in names(Mod_List_stl_dn[[p]])) {
if (mod == "HighwayClass") next
cat("  - Processing model:", mod, "\n")
# Select the current model
curr_model <- Mod_List_stl_dn[[p]] |> select(mod)
# Compute residual features
residual_features <- curr_model |>
augment() |>
features(.innov, ljung_box) |>
mutate(p = p, .model = mod)  # Add the "p" and ".model" columns to the result
# Append to the main tibble
residuals_tibble <- dplyr::bind_rows(residuals_tibble, residual_features)
}
}
View(residuals_tibble)
View(residuals_tibble)
# Initialize an empty tibble to store results
residuals_tibble <- tibble::tibble(p = character(), .model = character(), .feature = character(), .value = numeric())
for (p in names(Mod_List_stl_dn)) {
cat("Processing p =", p, "models \n")
for (mod in names(Mod_List_stl_dn[[p]])) {
if (mod == "HighwayClass") next
cat("  - Processing model:", mod, "\n")
# Select the current model
curr_model <- Mod_List_stl_dn[[p]] |> select(mod)
# Compute residual features
residual_features <- curr_model |>
augment() |>
features(.innov, ljung_box) |>
mutate(p = p, .model = mod) |> # Add the "p" and ".model" columns to the result
select(-.feature,-.value)
# Append to the main tibble
residuals_tibble <- dplyr::bind_rows(residuals_tibble, residual_features)
}
}
for (p in names(Mod_List_stl_dn)) {
cat("Processing p =", p, "models \n")
for (mod in names(Mod_List_stl_dn[[p]])) {
if (mod == "HighwayClass") next
cat("  - Processing model:", mod, "\n")
# Select the current model
curr_model <- Mod_List_stl_dn[[p]] |> select(mod)
# Compute residual features
residual_features <- curr_model |>
augment() |>
features(.innov, ljung_box) |>
mutate(p = p, .model = mod) # Add the "p" and ".model" columns to the result
# Append to the main tibble
residuals_tibble <- dplyr::bind_rows(residuals_tibble, residual_features)
}
}
View(residuals_tibble)
residuals_tibble <- residuals_tibble |> select(-.feature,-.value)
View(residuals_tibble)
write.csv(residuals_tibble,paste0("./Results/Accuracies/Denoised_STL/Hwy_",hwy,"/Residuals",p,".csv"))
write.csv(residuals_tibble,paste0("./Results/Accuracies/Denoised_STL/Hwy_",hwy,"/Residuals",".csv"))
# Initialize empty tibble
residuals_tibble <- tibble::tibble(p = character(), .model = character(), .feature = character(), .value = numeric())
for (p in names(Mod_List)) {
for (mod in names(Mod_List[[p]])) {
if (mod == "HighwayClass") next
curr_model <- Mod_List[[p]] |> select(mod) # Select the current model
# Compute autocorrelation of residuals
residual_features <- curr_model |>
augment() |>
features(.innov, ljung_box) |>
mutate(p = p, .model = mod) # Add the "p" and ".model" columns to the result
# Append to the main tibble
residuals_tibble <- dplyr::bind_rows(residuals_tibble, residual_features)
}
}
residuals_tibble <- residuals_tibble |> select(-.feature,-.value)  # remove empty feature and value columns
write.csv(residuals_tibble,paste0("./Results/Accuracies/Denoised_Ad/Hwy_",hwy,"/Residuals",".csv"))
Crashes_w_hwy=read.csv(paste0("./Data/Preprocessed/Crash_hwy_",hwy,"_Full.csv"))|>
mutate(Week = yearweek(Week)) |>
as_tsibble(index = Week, key = HighwayClass)
Mod_List_crashes=list()
for (i in (1:length(P))){
p = P[i]
splits=ttsplit(p,Crashes_w_hwy)
Train <- splits$Train
Test <- splits$Test
# ==== Model Fits ====
print(paste0("Working on p=",p))
fit_full <- Train |>
model(naive = NAIVE(crashCount),
snaive = SNAIVE(crashCount),
drift = RW(crashCount ~ drift()),
tslm_base = TSLM(crashCount ~ trend() + season()),
tslm_inter = TSLM(crashCount ~ trend() + season() + trend() * season() + home + covid + holiday + icePresent),
tslm_vars = TSLM(crashCount ~ trend() + season() + home + covid + holiday + icePresent),
arima_plain = ARIMA(crashCount, stepwise = TRUE),
arima_full = ARIMA(crashCount ~ trend() + season() + home + covid + holiday + icePresent, stepwise = TRUE),
arima_sdif = ARIMA(crashCount ~ PDQ(0,0,0) + trend() + season() + home + covid + holiday, stepwise = TRUE),
#nn_base = NNETAR(crashCount, n_networks = 10),
#nn_vars = NNETAR(crashCount~ home + covid + holiday + icePresent, n_networks = 10)
)
Mod_List_crashes[[as.character(p)]] <- fit_full
# ==== Model Evaluation ====
glance(fit_full) |> arrange(AICc) |> select(.model:BIC)
accuracy(fit_full)
print(paste0("Forecasting p=",p))
for_full <- fit_full |> forecast(Test)
ac_full <- accuracy(for_full,Test) |> arrange(RMSE)
ac_full=ac_full|>mutate(P=p)
Ac_List[[i]]=ac_full|>select(.model,RMSE,P)
dir.create(paste0("./Results/Accuracies/Full/Hwy_",hwy))
write.csv(ac_full,paste0("./Results/Accuracies/Full/Hwy_",hwy,"/TTsp_",p,".csv"))
print(paste0("Finished p=",p))
}
Combined_tibble <- bind_rows(Ac_List)|> rename(
Model = .model,
Proportion = P
)|>mutate(
Group = case_when(
Model %in% c("nn_base", "nn_vars") ~ "Neural Networks",
Model %in% c("arima_full", "arima_plain", "arima_sdif") ~ "ARIMA",
Model %in% c("tslm_base", "tslm_inter", "tslm_vars") ~ "Regression",
Model %in% c("drift", "naive", "snaive") ~ "Baseline",
TRUE ~ "Other"
)
) |>
mutate(Group = factor(Group, levels = c("Neural Networks", "ARIMA", "Regression", "Baseline")))|>
mutate(Model = factor(Model, levels = c(
"nn_base", "nn_vars",
"arima_full", "arima_plain", "arima_sdif",
"tslm_base", "tslm_inter", "tslm_vars",
"drift", "naive", "snaive"
)))
custom_colors <- c(
"nn_base" = "#1f77b4", "nn_vars" = "#74a9cf",
"arima_full" = "#31a354", "arima_plain" = "#74c476", "arima_sdif" = "#a1d99b",
"tslm_base" = "#ffcc00", "tslm_inter" = "#ffdd55", "tslm_vars" = "#ffee99",
"drift" = "#de2d26", "naive" = "#fc9272", "snaive" = "#fcbba1"
)
min_rmse_points <- Combined_tibble |>
group_by(Proportion) |>
slice_min(order_by = RMSE, n = 1) |>
ungroup()
p1=ggplot(Combined_tibble, aes(x = Proportion, y = RMSE, color = Model)) +
geom_point(size = 3) +
geom_line(size = 1) +
geom_point(data = min_rmse_points, aes(x = Proportion, y = RMSE),
shape = 4, size = 4, color = "black", inherit.aes = FALSE) +
geom_text(data = min_rmse_points, aes(x = Proportion, y = RMSE, label = sprintf("%.2f", RMSE)),
vjust = -0.5, color = "black", inherit.aes = FALSE) +
scale_color_manual(values = custom_colors) +
scale_x_continuous(
breaks = unique(Combined_tibble$Proportion)
) +
facet_wrap(~ Group, scales = "free", ncol = 1) +
labs(
title = "RMSE by Train-Test Split Proportion",
subtitle = "Grouped by Model Type",
x = "Percentage of Test",
y = "Root Mean Square Error (RMSE)",
color = "Model"
) +
guides(
color = guide_legend(
ncol = 1,
byrow = TRUE,
title = "Model Types",
override.aes = list(size = 4)
)
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
p1
graph_save(p1,"RMSE_vs_proportion",paste0("./Results/Graphs/RMSE/Crash_Full_hwy_",hwy))
cat("  - Processing model:", mod, "\n")
for (p in names(Mod_List_crashes)) {
cat("Processing p=",p," models \n")
for (mod in names(Mod_List_crashes[[p]])) {
if(mod=='HighwayClass') next
cat("  - Processing model:", mod, "\n")
curr_model <- Mod_List_crashes[[p]] |> select(mod)
curr_resid_graph <- curr_model |> gg_tsresiduals() + labs(title=paste(mod,'Residuals'), subtitle=paste0("Original Data ",'(p=',p,")"))
graph_save(graph=curr_resid_graph,
graph_name=paste0("Residuals",p,mod),
graph_path=paste0("./Results/Graphs/Residuals/Crash_Full_hwy_",hwy,"/"))
}
}
# Initialize empty tibble
residuals_tibble <- tibble::tibble(p = character(), .model = character(), .feature = character(), .value = numeric())
for (p in names(Mod_List_crashes)) {
for (mod in names(Mod_List_crashes[[p]])) {
if (mod == "HighwayClass") next
curr_model <- Mod_List_crashes[[p]] |> select(mod) # Select the current model
# Compute autocorrelation of residuals
residual_features <- curr_model |>
augment() |>
features(.innov, ljung_box) |>
mutate(p = p, .model = mod) # Add the "p" and ".model" columns to the result
# Append to the main tibble
residuals_tibble <- dplyr::bind_rows(residuals_tibble, residual_features)
}
}
residuals_tibble <- residuals_tibble |> select(-.feature,-.value)  # remove empty feature and value columns
write.csv(residuals_tibble,paste0("./Results/Accuracies/Full/Hwy_",hwy,"/Residuals",".csv"))
#=================== Loading Packages and Data, Setting paths ==========================
library(easypackages)
libraries("urca","fpp3","tidyverse","readxl")
Crashes <- read_excel("./Data/EBR Daily by Hwy Class.xlsx")
Games <- read.csv('./Data/lsu-schedule-scrape-18-23.csv')
Covid <- read_excel('./Data/covid variable.xlsx')
Holidays <- read.csv('./Data/holiday_dates_baton_rouge.csv')
graph_save <- function(graph,graph_name,graph_path) {
ggsave(paste0(graph_path,graph_name,".jpg"),graph,width=15,height=8)
}
#=================== Data Pre-processing ==============================================
# Convert to Weekly Data Tibbles
#===== Crashes
Crashes_w <- Crashes |>
mutate(Week = yearweek(CrashDate)) |>
group_by(Week, HighwayClass) |>
summarise(
crashCount = sum(crashCount),
Pedestrian = sum(Pedestrian),
Bicycle = sum(Bicycle),
NonMotorist = sum(NonMotorist),
Motorcycle = sum(Motorcycle),
Fatal = sum(Fatal),
iceCrashes = sum(iceCrashes),
icePresent = ifelse(iceCrashes > 0,1,0)
) |>
as_tsibble(index = Week, key = HighwayClass) |>
ungroup()
#===== Games
Games_w <- Games |>
mutate(Week = yearweek(date),
home = ifelse(location == 'Home',1,0)) |>
group_by(Week) |>
summarise(home = sum(home)) |>
as_tsibble(index=Week) |>
ungroup()
#===== Covid
Covid_w <- Covid |>
mutate(Week = yearweek(date)) |>
group_by(Week) |>
summarise(covid = max(covid)) |>
as_tsibble(index=Week) |>
ungroup()
#===== Holiday
Holiday_w <- Holidays |>
mutate(Week = yearweek(date)) |>
group_by(Week) |>
summarise(holiday = max(holiday)) |>
as_tsibble(index=Week) |>
ungroup()
#===== Data Combination
tables_list=list(Crashes_w,Games_w,Covid_w,Holiday_w)
Crashes_w <- tables_list |>
reduce(left_join, by = c("Week"))|>
mutate(across(everything(), ~ replace_na(., 0)))
# Select a Highway Class (integer between 1 and 43)
# Note: Not all have good data or create good forecasts
hwy = 20
Crashes_w_hwy <- Crashes_w |>
filter(HighwayClass == hwy) |>
as_tsibble(index = Week)
#===== Moving Average
Crashes_w_hwy <- Crashes_w_hwy |>
mutate(
`5-MA` = slider::slide_dbl(crashCount, mean,
.before = 2, .after = 2, .complete = TRUE),
`4-MA` = slider::slide_dbl(crashCount, mean,
.before = 1, .after = 2, .complete = TRUE),
`2x4-MA` = slider::slide_dbl(`4-MA`, mean,
.before = 1, .after = 0, .complete = TRUE),
`26-MA` = slider::slide_dbl(crashCount, mean,
.before = 12, .after = 13, .complete = TRUE)
)
View(Crashes_w_hwy)
# Classical Decomp Additive
CDA_Crashes_w_hwy=Crashes_w_hwy |>
model(
classical_decomposition(crashCount, type = 'additive')
) |>
components() |>
autoplot() +
labs(title="Classical additive decomposition of EBR Hwy Class 20 crashes")+theme_bw()
graph_save(CDA_Crashes_w_hwy,'Crashes_DecompAdd_w_hwy',graph_path)
graph_path="./Results/Graphs/Decomposition/"
# Classical Decomp Additive
CDA_Crashes_w_hwy=Crashes_w_hwy |>
model(
classical_decomposition(crashCount, type = 'additive')
) |>
components() |>
autoplot() +
labs(title="Classical additive decomposition of EBR Hwy Class 20 crashes")+theme_bw()
graph_save(CDA_Crashes_w_hwy,'Crashes_DecompAdd_w_hwy',graph_path)
#=================== Loading Packages and Data, Setting paths ==========================
library(easypackages)
libraries("urca","fpp3","tidyverse","readxl")
Crashes <- read_excel("./Data/EBR Daily by Hwy Class.xlsx")
Games <- read.csv('./Data/lsu-schedule-scrape-18-23.csv')
Covid <- read_excel('./Data/covid variable.xlsx')
Holidays <- read.csv('./Data/holiday_dates_baton_rouge.csv')
graph_save <- function(graph,graph_name,graph_path) {
ggsave(paste0(graph_path,graph_name,".png"),graph,width=15,height=8)
}
#=================== Data Pre-processing ==============================================
# Convert to Weekly Data Tibbles
#===== Crashes
Crashes_w <- Crashes |>
mutate(Week = yearweek(CrashDate)) |>
group_by(Week, HighwayClass) |>
summarise(
crashCount = sum(crashCount),
Pedestrian = sum(Pedestrian),
Bicycle = sum(Bicycle),
NonMotorist = sum(NonMotorist),
Motorcycle = sum(Motorcycle),
Fatal = sum(Fatal),
iceCrashes = sum(iceCrashes),
icePresent = ifelse(iceCrashes > 0,1,0)
) |>
as_tsibble(index = Week, key = HighwayClass) |>
ungroup()
#===== Games
Games_w <- Games |>
mutate(Week = yearweek(date),
home = ifelse(location == 'Home',1,0)) |>
group_by(Week) |>
summarise(home = sum(home)) |>
as_tsibble(index=Week) |>
ungroup()
#===== Covid
Covid_w <- Covid |>
mutate(Week = yearweek(date)) |>
group_by(Week) |>
summarise(covid = max(covid)) |>
as_tsibble(index=Week) |>
ungroup()
#===== Holiday
Holiday_w <- Holidays |>
mutate(Week = yearweek(date)) |>
group_by(Week) |>
summarise(holiday = max(holiday)) |>
as_tsibble(index=Week) |>
ungroup()
#===== Data Combination
tables_list=list(Crashes_w,Games_w,Covid_w,Holiday_w)
Crashes_w <- tables_list |>
reduce(left_join, by = c("Week"))|>
mutate(across(everything(), ~ replace_na(., 0)))
#===== Data Selection and Mutation
# Select a Highway Class (integer between 1 and 43)
# Note: Not all have good data or create good forecasts
hwy = 20
Crashes_w_hwy <- Crashes_w |>
filter(HighwayClass == hwy) |>
as_tsibble(index = Week)
#===== Moving Average
Crashes_w_hwy <- Crashes_w_hwy |>
mutate(
`5-MA` = slider::slide_dbl(crashCount, mean,
.before = 2, .after = 2, .complete = TRUE),
`4-MA` = slider::slide_dbl(crashCount, mean,
.before = 1, .after = 2, .complete = TRUE),
`2x4-MA` = slider::slide_dbl(`4-MA`, mean,
.before = 1, .after = 0, .complete = TRUE),
`26-MA` = slider::slide_dbl(crashCount, mean,
.before = 12, .after = 13, .complete = TRUE)
)
#=================== Decompositions ====================================================
graph_path="./Results/Graphs/Decomposition/"
# Classical Decomp Multiplicative
CDM_Crashes_w_hwy=Crashes_w_hwy |>
model(
classical_decomposition(crashCount, type = 'multiplicative')
) |>
components() |>
autoplot() +
labs(title="Classical multiplicative decomposition of EBR Hwy Class 20 crashes")
CDM_Crashes_w_hwy
graph_save(CDM_Crashes_w_hwy,'Crashes_DecompMult_w_hwy',graph_path)
# Classical Decomp Additive
CDA_Crashes_w_hwy=Crashes_w_hwy |>
model(
classical_decomposition(crashCount, type = 'additive')
) |>
components() |>
autoplot() +
labs(title="Classical additive decomposition of EBR Hwy Class 20 crashes")+
theme_bw()
graph_save(CDA_Crashes_w_hwy,'Crashes_DecompAdd_w_hwy',graph_path)
# Add decomp related vars to the dataset
Crashes_w_hwy <- Crashes_w_hwy |>
mutate(dn_crashes = crashCount - components(dcmp_add)$random,         # denoised data (additive)
season_adjust = components(dcmp_add)$season_adjust,            # seasonally adjusted (additive)
dn_multi = crashCount - components(dcmp_multi)$random,         # denoised data (multi)
season_adjust_multi = components(dcmp_multi)$season_adjust,    # seasonally adjusted (multi)
stl_dn_crashes = crashCount - components(stl_dcmp)$remainder,  # STL denoised data
stl_season_adjust = components(stl_dcmp)$season_adjust)        # STL seasonally adjusted
View(Crashes_w_hwy)
Dn_Graph <- Crashes_w_hwy |> filter(HighwayClass == 20) |> filter(!is.na(dn_crashes))|>
autoplot(dn_crashes)
Dn_graph
Dn_Graph <- Crashes_w_hwy |> filter(HighwayClass == 20) |> filter(!is.na(dn_crashes))|>
autoplot(dn_crashes)
Dn_Graph
graph_save(Dn_Graph,'Denoised_Crashes',graph_path)
