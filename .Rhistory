crash_per_vmt <- read_excel("C:/Users/malle72/projects/FatalCrashesPerVMT.xlsx")
View(crash_per_vmt)
View(crash_per_vmt)
library(readxl)
crash_per_vmt <- read_excel("C:/Users/malle72/projects/FatalCrashesPerVMT.xlsx")
View(crash_per_vmt)
for (i in old_hwy_classes) {
if (i %in% old_cutoffs_merge$code){
data = df_old[df_old$HighwayClassCode==i,]$AADT # data for current graph
class_desc = old_cutoffs_merge[old_cutoffs_merge$code==i,]$HighwayClass # hwy class for current graph title
count_seg = hwy_counts[hwy_counts$description==class_desc,]$n
x_max = max(old_cutoffs_merge[old_cutoffs_merge$code == i,]$cutoff2, max(data)) # appropriate max x value to fit all data and cutoffs
x_min = min(old_cutoffs_merge[old_cutoffs_merge$code == i,]$cutoff1, min(data)) # appropriate min x value to fit all data and cutoffs
hist(data,xlab = glue("Hwy Class: {i}"), main = class_desc,
xlim = c(x_min-0.1*x_min,x_max+0.1*x_max))
abline(v = old_cutoffs_merge[old_cutoffs_merge$code == i,]$cutoff1, col='red', lwd=2)
abline(v = old_cutoffs_merge[old_cutoffs_merge$code == i,]$cutoff2, col='red', lwd=2)
abline(v = quantile(data, probs = 0.25), col = 'blue', lwd=2)
abline(v = quantile(data, probs = 0.75), col = 'blue', lwd=2)
abline(v = quantile(data, probs = 1/3), col = 'green', lwd=2)
abline(v = quantile(data, probs = 2/3), col = 'green', lwd=2)
text(count_seg)
legend('topright',legend=c('Cutoffs','Quartiles','33rd and 66th'), col=c('red','blue','green'), lty=1, lwd = 2)
}
}
old_hwy_classes<-unique(df_old$HighwayClassCode)
df_old <- read_csv("C:/Users/malle72/projects/AADT Cutoffs/Old Hwy Class AADT.csv")
library(tidyverse)
df_old <- read_csv("C:/Users/malle72/projects/AADT Cutoffs/Old Hwy Class AADT.csv")
old_hwy_classes<-unique(df_old$HighwayClassCode)
old_hwy_classes = sort(old_hwy_classes)
hwy_counts<- df_old %>% count(description)
old_cutoffs_merge <- merge(old_cutoffs,codes_and_desc, by.x = 'HighwayClass', by.y = 'description', all.x = T)
library(MASS)
pbinom
library(ggstatsplot)
warning()
warnings()
source("~/.active-rstudio-document")
library(tidyverse)
install.packages("tsibble")
source("~/.active-rstudio-document")
library(tsibble)
source("~/.active-rstudio-document")
View(y)
y
olympic_running
tourism
install.packages("fpp3")
install.packages("fpp3")
install.packages("fpp3")
library(fpp3)
install.packages(fpp3)
install.package(fpp3)
install.packages('fpp3')
install.packages('fabletools')
install.packages('Rtools')
install.packages("Rtools")
pwd
pwd()
getwd()
install.packages('fpp3')
library(fpp3)
PBS
PBS |>
filter(ATC2 == "A10")
PBS |>
filter(ATC2 == "A10") |>
select(Month, Concession, Type, Cost)
source("~/.active-rstudio-document", echo=TRUE)
aus_arrivals |>
gg_season(Arrivals)
library(fpp3)
aus_arrivals |>
gg_season(Arrivals)
aus_arrivals |>
gg_season(Arrivals, polar = TRUE)
aus_arrivals |>
gg_season(Arrivals,period = 'year')
# ====Seasonal Plots====
a10 |>
gg_season(Cost, labels='both') +
labs(y = "$ (millions)",
title = "Seasonal plot: Antidiabetic drug sales")
# ===== Pharmacy Data =====
PBS |>
filter(ATC2 == "A10") |>
select(Month, Concession, Type, Cost) |>
summarise(TotalC = sum(Cost)) |>
mutate(Cost = TotalC / 1e6) -> a10
a10 |>
autoplot() +
geom_point() +
labs(y= "$ (millions)",
title = "australian antidiabetic drug sales")
# ====Seasonal Plots====
a10 |>
gg_season(Cost, labels='both') +
labs(y = "$ (millions)",
title = "Seasonal plot: Antidiabetic drug sales")
vic_elec |> gg_season(Demand)
vic_elec |> gg_season(Demand,period='day')
# 6
aus_arrivals |>
autoplot(Arrivals)
library(fpp3)
# 6
aus_arrivals |>
autoplot(Arrivals)
aus_arrivals |>
gg_season(Arrivals)
aus_arrivals |>
gg_subseries(Arrivals)
# 6
aus_arrivals %>%
autoplot(Arrivals)
aus_arrivals
# ====Lag Plots====
recent_production <- aus_production |>
filter(year(Quarter) >= 2000)
recent_production |>
gg_lag(Beer, geom = "point") +
labs(x = "lag(Beer, k)")
library(readxl)
crashes <- read_excel("C:/Users/malle72/projects/TimeSeries_fpp3_2024/EBR Daily by Hwy Class.xlsx")
View(crashes)
crashes |>
group_by(HighwayClass) |>
summarise(countCrash=sum(Crashes)) |>
arrange(countCrash)|>
print(n=23)
# convert tibble to tsibble (daily)
crashes_d <- crashes |>
mutate(CrashDate = ymd(CrashDate)) |>
as_tsibble(index = CrashDate, key = HighwayClass)
# convert tibble to tsibble (monthly)
crashes_m <- crashes |>
mutate(Month = yearmonth(CrashDate)) |>
group_by(Month, HighwayClass) |>
summarise(
Crashes = sum(Crashes),
Pedestrian = sum(Pedestrian),
Bicycle = sum(Bicycle),
NonMotorist = sum(NonMotorist),
Motorcycle = sum(Motorcycle),
Fatal = sum(Fatal)
) |>
as_tsibble(index = Month, key = HighwayClass)
# renaming column Crashes -> crashCount
crashes_d <- mutate(crashes_d, crashCount = Crashes)
crashes_m <- mutate(crashes_m, crashCount = Crashes)
# removing old instance of renamed column
crashes_d <- select(crashes_d, -Crashes)
crashes_m <- select(crashes_m, -Crashes)
# Summarise total crashes
summarise(crashes_d, TotalCrashes = sum(crashCount))
# Create calculated field
crashes_d = crashes_d |>
mutate(PercentFatal = Fatal/crashCount)
crashes_m = crashes_m |>
mutate(PercentFatal = Fatal/crashCount)
crashes_m |>
autoplot(PercentFatal)
crashes_d |>
filter(! HighwayClass %in% c(6,31,42,29,23,11,9,19,33,4,'NULL')) |>
fill_gaps() |>
gg_season(crashCount)
crashes_d |>
filter(HighwayClass == 20) |>
autoplot()
crashes_m |>
filter(HighwayClass == 20) |>
autoplot()
# Lag
crashes_d |>
filter(HighwayClass == 20) |>
gg_lag(crashCount, geom = 'point')
crashes_m |>
filter(HighwayClass == 20) |>
ungroup() |>
gg_lag(crashCount, geom = 'point', lags = 1:12)
# Autocorrelation
crashes_d |>
filter(HighwayClass == 20) |>
fill_gaps() |>
ACF(crashCount) |>
autoplot()
crashes_m |>
filter(HighwayClass == 20) |>
fill_gaps() |>
ACF(crashCount, lag_max = 12) |>
autoplot()
library(fpp3)
gdpc <- global_economy |>
mutate(GDP_per_capita = GDP/Population) |>
select(Year,Country, GDP, Population, GDP_per_capita)
gdpc
gdpc |>
filter(Country == "Sweden") |>
autoplot(GDP_per_capita)
fit <- gdpc |>
model(trend_model = TSLM(GDP_per_capita ~ trend()))
fit
fit |> forecast(h="3 years")
fit |>
forecast(h="3 years") |>
filter(Country == "Sweden") |>
autoplot(gdpc)
library(fpp3)
library(readxl)
crashes <- read_excel("Datasets/EBR Daily by Hwy Class.xlsx")
setwd("C:/Users/malle72/projects/TimeSeries_fpp3_2024")
crashes <- read_excel("Datasets/EBR Daily by Hwy Class.xlsx")
# convert tibble to tsibble (monthly)
crashes_w <- crashes |>
mutate(Week = yearweek(CrashDate)) |>
group_by(Week, HighwayClass) |>
summarise(
crashCount = sum(crashCount),
Pedestrian = sum(Pedestrian),
Bicycle = sum(Bicycle),
NonMotorist = sum(NonMotorist),
Motorcycle = sum(Motorcycle),
Fatal = sum(Fatal)
) |>
as_tsibble(index = Week, key = HighwayClass)
crashes_w = crashes_w |>
mutate(PercentFatal = Fatal/crashCount)
crashes_w
crashes_w |>
ungroup()
# convert tibble to tsibble (monthly)
crashes_w <- crashes |>
mutate(Week = yearweek(CrashDate)) |>
group_by(Week, HighwayClass) |>
summarise(
crashCount = sum(crashCount),
Pedestrian = sum(Pedestrian),
Bicycle = sum(Bicycle),
NonMotorist = sum(NonMotorist),
Motorcycle = sum(Motorcycle),
Fatal = sum(Fatal)
) |>
as_tsibble(index = Week, key = HighwayClass) |>
ungroup()
crashes_w = crashes_w |>
mutate(PercentFatal = Fatal/crashCount)
crashes_w
crashes_w |>
filter(HighwayClass == 20) |>
autoplot(crashCount)
# Lag
crashes_w |>
filter(HighwayClass == 20) |>
ungroup() |>
gg_lag(crashCount, geom = 'point', lags = c(5,10,15,20,25,30,35,40,45,50,52,60))
# Lag
crashes_w |>
filter(HighwayClass == 20) |>
ungroup() |>
gg_lag(crashCount, geom = 'point', lags = c(5,10,15,20,26,30,35,40,45,50,52,60))
# Autocorrelation
crashes_w |>
filter(HighwayClass == 20) |>
fill_gaps() |>
ACF(crashCount, lag_max = 60) |>
autoplot()
# Moving Average
crashes_w_20 <- crashes_w |>
filter(HighwayClass == 20) |>
fill_gaps() |> replace_na(list(crashCount=0)) |>
ungroup() |>
mutate(
`5-MA` = slider::slide_dbl(crashCount, mean,
.before = 2, .after = 2, .complete = TRUE),
`4-MA` = slider::slide_dbl(crashCount, mean,
.before = 1, .after = 2, .complete = TRUE),
`2x4-MA` = slider::slide_dbl(`4-MA`, mean,
.before = 1, .after = 0, .complete = TRUE),
`26-MA` = slider::slide_dbl(crashCount, mean,
.before = 12, .after = 13, .complete = TRUE)
)
crashes_w_20 |>
autoplot(crashCount, color='grey') +
geom_line(aes(y = `5-MA`, color = "5-MA")) +
geom_line(aes(y = `4-MA`, color = "4-MA")) +
geom_line(aes(y = `2x4-MA`, color = "2x4-MA")) +
geom_line(aes(y = `26-MA`, color = "26-MA")) +
scale_color_manual(values = c("5-MA" = "#D55E00", "4-MA" = "blue", "2x4-MA" = "green","26-MA"="purple")) +
theme(legend.position = c(0.7, 0.2)) +
labs(y = 'Crashes',
title = 'EBR Hwy Class 20 Moving Avg Crashes',
color = 'Moving Averages')
crashes_w_20 |>
model(
classical_decomposition(crashCount, type = 'additive')
) |>
components() |>
autoplot() +
labs(title="Classical additive decomposition of EBR Hwy Class 20 crashes")
dcmp <- crashes_w_20 |>
model(classical_decomposition(crashCount, type = 'multiplicative'))
dn_crashes_w_20 <- crashes_w_20$crashCount - components(dcmp)$random
crashes_w_20 <- crashes_w_20 |>
mutate(denoise = dn_crashes_w_20)
crashes_w_20 |>
model(
classical_decomposition(denoise, type = 'additive')
) |>
components() |>
autoplot() +
labs(title="Denoised additive decomposition of EBR Hwy Class 20 crashes")
crashes <- read_excel("Datasets/EBR Daily by Hwy Class.xlsx")
# convert tibble to tsibble (weekly)
crashes_w <- crashes |>
mutate(Week = yearweek(CrashDate)) |>
group_by(Week, HighwayClass) |>
summarise(
crashCount = sum(crashCount),
Pedestrian = sum(Pedestrian),
Bicycle = sum(Bicycle),
NonMotorist = sum(NonMotorist),
Motorcycle = sum(Motorcycle),
Fatal = sum(Fatal)
) |>
as_tsibble(index = Week, key = HighwayClass) |>
ungroup()
crashes_w = crashes_w |>
mutate(PercentFatal = Fatal/crashCount)
crashes_w |>
filter(! HighwayClass %in% c(6,31,42,29,23,11,9,19,33,4,'NULL')) |>
fill_gaps() |>
gg_season(crashCount)
crashes_w |>
filter(HighwayClass == 20) |>
autoplot(crashCount)
# Lag
crashes_w |>
filter(HighwayClass == 20) |>
ungroup() |>
gg_lag(crashCount, geom = 'point', lags = c(5,10,15,20,26,30,35,40,45,50,52,60))
# Autocorrelation
crashes_w |>
filter(HighwayClass == 20) |>
fill_gaps() |>
ACF(crashCount, lag_max = 60) |>
autoplot()
# Moving Average
crashes_w_20 <- crashes_w |>
filter(HighwayClass == 20) |>
fill_gaps() |> replace_na(list(crashCount=0)) |>
mutate(
`5-MA` = slider::slide_dbl(crashCount, mean,
.before = 2, .after = 2, .complete = TRUE),
`4-MA` = slider::slide_dbl(crashCount, mean,
.before = 1, .after = 2, .complete = TRUE),
`2x4-MA` = slider::slide_dbl(`4-MA`, mean,
.before = 1, .after = 0, .complete = TRUE),
`26-MA` = slider::slide_dbl(crashCount, mean,
.before = 12, .after = 13, .complete = TRUE)
)
crashes_w_20 |>
autoplot(crashCount, color='grey') +
geom_line(aes(y = `5-MA`, color = "5-MA")) +
geom_line(aes(y = `4-MA`, color = "4-MA")) +
geom_line(aes(y = `2x4-MA`, color = "2x4-MA")) +
geom_line(aes(y = `26-MA`, color = "26-MA")) +
scale_color_manual(values = c("5-MA" = "#D55E00", "4-MA" = "blue", "2x4-MA" = "green","26-MA"="purple")) +
theme(legend.position = c(0.7, 0.2)) +
labs(y = 'Crashes',
title = 'EBR Hwy Class 20 Moving Avg Crashes',
color = 'Moving Averages')
# Decomposition
crashes_w_20 |>
model(
classical_decomposition(crashCount, type = 'additive')
) |>
components() |>
autoplot() +
labs(title="Classical additive decomposition of EBR Hwy Class 20 crashes")
# Decomposition
crashes_w_20 |>
model(
classical_decomposition(crashCount, type = 'mutliplicative')
) |>
components() |>
autoplot() +
labs(title="Classical additive decomposition of EBR Hwy Class 20 crashes")
# Decomposition
crashes_w_20 |>
model(
classical_decomposition(crashCount, type = 'multiplicative')
) |>
components() |>
autoplot() +
labs(title="Classical additive decomposition of EBR Hwy Class 20 crashes")
# Decomposition
crashes_w_20 |>
model(
classical_decomposition(crashCount, type = 'multiplicative')
) |>
components() |>
autoplot() +
labs(title="Classical multiplicative decomposition of EBR Hwy Class 20 crashes")
dcmp <- crashes_w_20 |>
model(classical_decomposition(crashCount, type = 'additive'))
dn_crashes_w_20 <- crashes_w_20$crashCount - components(dcmp)$random
crashes_w_20 <- crashes_w_20 |>
mutate(denoise = dn_crashes_w_20)
# Redo model with denoised data
crashes_w_20 |>
model(
classical_decomposition(denoise, type = 'additive')
) |>
components() |>
autoplot() +
labs(title="Denoised additive decomposition of EBR Hwy Class 20 crashes")
# Create array of crashCount minus trend component from decomp
# Insert detrended column to tsibble
crashes_w_20 <- crashes_w_20 |>
mutate(detrend = crashes_w_20$crashCount - components(dcmp)$trend)
# Redo model with denoised data
crashes_w_20 |>
model(
classical_decomposition(denoise, type = 'additive')
) |>
components() |>
autoplot() +
labs(title="De-trended additive decomposition of EBR Hwy Class 20 crashes")
# Redo model with denoised data
crashes_w_20 |>
model(
classical_decomposition(detrend, type = 'additive')
) |>
components() |>
autoplot() +
labs(title="De-trended additive decomposition of EBR Hwy Class 20 crashes")
components(dcmp)
# ==== Seasonal Adjustment ====
crashes_w_20 |>
model(
classical_decomposition(components(dcmp)$season_adjust, type = 'additive')
) |>
components() |>
autoplot() +
labs(title="Seasonally Adjusted additive decomposition of EBR Hwy Class 20 crashes")
crashes_w_20 <- crashes_w_20 |>
mutate(season_adjust = components(dcmp)$season_adjust)
crashes_w_20 |>
model(
classical_decomposition(season_adjust, type = 'additive')
) |>
components() |>
autoplot() +
labs(title="Seasonally Adjusted additive decomposition of EBR Hwy Class 20 crashes")
# Redo model with denoised data
crashes_w_20 |>
model(
classical_decomposition(denoise, type = 'multiplicative')
) |>
components() |>
autoplot() +
labs(title="Denoised additive decomposition of EBR Hwy Class 20 crashes")
# Redo model with denoised data
crashes_w_20 |>
model(
classical_decomposition(denoise, type = 'multiplicative')
) |>
components() |>
autoplot() +
labs(title="Denoised multiplicative decomposition of EBR Hwy Class 20 crashes")
# Redo model with denoised data
crashes_w_20 |>
model(
classical_decomposition(denoise, type = 'multiplicative')
) |>
components() |>
autoplot() +
labs(title="Denoised multiplicative decomposition of EBR Urban 2-Lane crashes")
# Redo model with denoised data
crashes_w_20 |>
model(
classical_decomposition(denoise, type = 'additive')
) |>
components() |>
autoplot() +
labs(title="Denoised additive decomposition of EBR Urban 2-Lane crashes")
crashes_w_20 |>
model(STL(crashCount ~ trend() + season(),
robust=T)) |>
components() |>
autoplot()
# ===== De-noise with STL =====
dcmp_stl <- crashes_w_20 |>
model(STL(crashCount ~ trend() + season(), robust=T)) # this model by itself didn't look bad
crashes_w_20 <- crashes_w_20 |>
mutate(denoise_stl = crashes_w_20$crashCount - components(dcmp_stl)$random)
components(dcmp_stl)$random
components(dcmp_stl)
components(dcmp)
crashes_w_20 <- crashes_w_20 |>
mutate(denoise_stl = crashes_w_20$crashCount - components(dcmp_stl)$remainder)
crashes_w_20 |>
model(STL(crashCount ~ trend() + season(), robust=T)) |>
components() |>
autoplot() +
labs(title="Denoised STL decomposition of EBR Urban 2-Lane crashes")
crashes_w_20 |>
model(STL(denoise_stl ~ trend() + season(), robust=T)) |>
components() |>
autoplot() +
labs(title="Denoised STL decomposition of EBR Urban 2-Lane crashes")
