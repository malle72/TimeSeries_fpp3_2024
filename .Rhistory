eggs |>
autoplot() +
labs(title = "Annual egg prices", y="US$ (adj for inflation")
fit <- eggs |>
model(RW(log(eggs) ~ drift()))
fit
fc <- fit |>
forecast(h=50)
fc
fc |> autoplot(eggs)
fc |>
autoplot(eggs,level=80, point_forecast = lst(mean, median))
us_retail_employment <- us_employment |>
filter(year(Month) >= 1990, Title == "Retail Trade")
dcmp <- us_retail_employment |>
model(STL(Employed ~ trend(window = 7), robust = TRUE)) |>
components() |>
select(-.model)
dcmp |>
model(NAIVE(season_adjust)) |>
forecast() |>
autoplot(dcmp) +
labs(y = "Number of people",
title = "US retail employment")
View(dcmp)
dcmp |>
model(NAIVE(season_adjust)) |>
forecast() |>
autoplot(dcmp) +
labs(y = "Number of people",
title = "Naive Forecast of Seasonally Adj")
fit_dcmp <- us_retail_employment |>
model(stlf = decomposition_model(
STL(Employed ~ trend(window = 7), robust = TRUE),
NAIVE(season_adjust)
))
fit_dcmp |>
forecast() |>
autoplot(us_retail_employment)+
labs(y = "Number of people",
title = "US retail employment")
fit_dcmp |> gg_tsresiduals()
# ==== Evaluating Point Forecast Accuracy ====
aus_production |> filter(year(Quarter) >= 1995)
aus_production |> filter_index("1995 Q1" ~ .)
# ==== 5.9 Evaluating Distribution Forecast Accuracy ====
google_fc |>
filter(.model == "Naïve") |>
autoplot(bind_rows(google_2015, google_jan_2016), level=80)+
labs(y = "$US",
title = "Google closing stock prices")
# Example: Google's Daily Stock Price
# Re-index based on trading days
google_stock <- gafa_stock |>
filter(Symbol == "GOOG", year(Date) >= 2015) |>
mutate(day = row_number()) |>
update_tsibble(index = day, regular = TRUE)
# Filter the year of interest
google_2015 <- google_stock |>
filter(year(Date) == 2015)
# Produce forecasts for the trading days in January 2016
google_jan_2016 <- google_stock |>
filter(yearmonth(Date) == yearmonth("2016 Jan"))
# ==== 5.9 Evaluating Distribution Forecast Accuracy ====
google_fit <- google_2015 |>
model(
Mean = MEAN(Close),
Naive = NAIVE(Close),
Drift = RW(Close ~ drift())
)
google_fc <- google_fit |>
forecast(google_jan_2016)
google_fc |>
filter(.model == "Naïve") |>
autoplot(bind_rows(google_2015, google_jan_2016), level=80)+
labs(y = "$US",
title = "Google closing stock prices")
google_fc
google_fc |>
filter(.model == "Naive") |>
autoplot(bind_rows(google_2015, google_jan_2016), level=80)+
labs(y = "$US",
title = "Google closing stock prices")
library(fpp3)
library(readxl)
crashes <- read_excel("Datasets/EBR Daily by Hwy Class.xlsx")
setwd("C:/Users/malle/projects/TimeSeries_fpp3_2024")
crashes <- read_excel("Datasets/EBR Daily by Hwy Class.xlsx")
# convert tibble to tsibble (weekly)
crashes_w <- crashes |>
mutate(Week = yearweek(CrashDate)) |>
group_by(Week, HighwayClass) |>
summarise(
crashCount = sum(crashCount),
Pedestrian = sum(Pedestrian),
Bicycle = sum(Bicycle),
NonMotorist = sum(NonMotorist),
Motorcycle = sum(Motorcycle),
Fatal = sum(Fatal)
) |>
as_tsibble(index = Week, key = HighwayClass) |>
ungroup()
crashes_w = crashes_w |>
mutate(PercentFatal = Fatal/crashCount)
crashes_w |>
filter(HighwayClass == 20) |>
autoplot(crashCount)
# Lag
crashes_w |>
filter(HighwayClass == 20) |>
ungroup() |>
gg_lag(crashCount, geom = 'point', lags = c(5,10,15,20,26,30,35,40,45,50,52,60))
# Autocorrelation
crashes_w |>
filter(HighwayClass == 20) |>
fill_gaps() |>
ACF(crashCount, lag_max = 60) |>
autoplot()
# Moving Average
crashes_w_20 <- crashes_w |>
filter(HighwayClass == 20) |>
fill_gaps() |> replace_na(list(crashCount=0)) |>
mutate(
`5-MA` = slider::slide_dbl(crashCount, mean,
.before = 2, .after = 2, .complete = TRUE),
`4-MA` = slider::slide_dbl(crashCount, mean,
.before = 1, .after = 2, .complete = TRUE),
`2x4-MA` = slider::slide_dbl(`4-MA`, mean,
.before = 1, .after = 0, .complete = TRUE),
`26-MA` = slider::slide_dbl(crashCount, mean,
.before = 12, .after = 13, .complete = TRUE)
)
# Plotting Moving Averages
crashes_w_20 |>
autoplot(crashCount, color='grey') +
geom_line(aes(y = `5-MA`, color = "5-MA")) +
geom_line(aes(y = `4-MA`, color = "4-MA")) +
geom_line(aes(y = `2x4-MA`, color = "2x4-MA")) +
geom_line(aes(y = `26-MA`, color = "26-MA")) +
scale_color_manual(values = c("5-MA" = "#D55E00", "4-MA" = "blue", "2x4-MA" = "green","26-MA"="purple")) +
theme(legend.position = c(0.7, 0.2)) +
labs(y = 'Crashes',
title = 'EBR Hwy Class 20 Moving Avg Crashes',
color = 'Moving Averages')
# Decomposition
crashes_w_20 |>
model(
classical_decomposition(crashCount, type = 'multiplicative')
) |>
components() |>
autoplot() +
labs(title="Classical multiplicative decomposition of EBR Hwy Class 20 crashes")
dcmp <- crashes_w_20 |>
model(classical_decomposition(crashCount, type = 'additive'))
# Create array of crashCount minus random component from decomp
dn_crashes_w_20 <- crashes_w_20$crashCount - components(dcmp)$random
# Insert denoised column to tsibble
crashes_w_20 <- crashes_w_20 |>
mutate(denoise = dn_crashes_w_20)
# Redo model with denoised data
crashes_w_20 |>
model(
classical_decomposition(denoise, type = 'additive')
) |>
components() |>
autoplot() +
labs(title="Denoised additive decomposition of EBR Urban 2-Lane crashes")
# ===== De-noise with STL =====
dcmp_stl <- crashes_w_20 |>
model(STL(crashCount ~ trend() + season(), robust=T)) # this model by itself didn't look bad
crashes_w_20 <- crashes_w_20 |>
mutate(denoise_stl = crashes_w_20$crashCount - components(dcmp_stl)$remainder)
crashes_w_20 |>
model(STL(denoise_stl ~ trend() + season(), robust=T)) |>
components() |>
autoplot() +
labs(title="Denoised STL decomposition of EBR Urban 2-Lane crashes")
# Create array of crashCount minus trend component from decomp
# Insert detrended column to tsibble
crashes_w_20 <- crashes_w_20 |>
mutate(detrend = crashes_w_20$crashCount - components(dcmp)$trend)
# Redo model with denoised data
crashes_w_20 |>
model(
classical_decomposition(detrend, type = 'additive')
) |>
components() |>
autoplot() +
labs(title="De-trended additive decomposition of EBR Hwy Class 20 crashes")
crashes_w_20 <- crashes_w_20 |>
mutate(season_adjust = components(dcmp)$season_adjust)
crashes_w_20 |>
model(
classical_decomposition(season_adjust, type = 'additive')
) |>
components() |>
autoplot() +
labs(title="Seasonally Adjusted additive decomposition of EBR Hwy Class 20 crashes")
fit_dcmp <- crashes_w_20 |>
model(stlf = decomposition_model(
STL(crashCount ~ trend(window = 7), robust = TRUE),
NAIVE(season_adjust)
))
fit_dcmp |>
forecast() |>
autoplot(crashes_w_20)+
labs(y = "Crashes",
title = "EBR Urban 2-Lane Crashes")
fit_dcmp <- crashes_w_20 |>
model(stlf = decomposition_model(
STL(crashCount ~ trend(window = 7), robust = TRUE),
SNAIVE(season_adjust)
))
fit_dcmp |>
forecast() |>
autoplot(crashes_w_20)+
labs(y = "Crashes",
title = "EBR Urban 2-Lane Crashes")
fit_dcmp |>
forecast(10) |>
autoplot(crashes_w_20)+
labs(y = "Crashes",
title = "EBR Urban 2-Lane Crashes")
fit_dcmp |>
forecast(h=10) |>
autoplot(crashes_w_20)+
labs(y = "Crashes",
title = "EBR Urban 2-Lane Crashes")
View(crashes_w_20)
fit_dcmp <- crashes_w_20 |>
model(stlf = decomposition_model(
STL(crashCount ~ trend(window = 4), robust = TRUE),
SNAIVE(season_adjust)
))
fit_dcmp <- crashes_w_20 |>
model(stlf = decomposition_model(
STL(crashCount ~ trend(window = 4), robust = FALSE),
SNAIVE(season_adjust)
))
fit_dcmp |>
forecast(h=10) |>
autoplot(crashes_w_20)+
labs(y = "Crashes",
title = "EBR Urban 2-Lane Crashes")
fit_dcmp <- crashes_w_20 |>
model(stlf = decomposition_model(
STL(crashCount ~ season(window = "periodic") + trend(window = 4), robust = TRUE),
NAIVE(crashCount)
))
fit_dcmp |>
forecast(h=10) |>
autoplot(crashes_w_20)+
labs(y = "Crashes",
title = "EBR Urban 2-Lane Crashes")
fit_dcmp |> gg_tsresiduals()
fc <- fit_dcmp |>
forecast(h=10)
fc|>
autoplot(crashes_w_20)+
labs(y = "Crashes",
title = "EBR Urban 2-Lane Crashes")
accuracy(fc,crashes_w_20)
augment(fit_dcmp)
fit_dcmp <- crashes_w_20 |>
model(stlf = decomposition_model(
STL(crashCount ~ season(window = "periodic") + trend(window = 7), robust = TRUE),
NAIVE(crashCount)
))
fc <- fit_dcmp |>
forecast(h=10)
fc|>
autoplot(crashes_w_20)+
labs(y = "Crashes",
title = "EBR Urban 2-Lane Crashes")
fit_dcmp <- crashes_w_20 |>
model(stlf = decomposition_model(
STL(crashCount ~ season(window = "periodic") + trend(window = 13), robust = TRUE),
NAIVE(crashCount)
))
fc <- fit_dcmp |>
forecast(h=10)
fc|>
autoplot(crashes_w_20)+
labs(y = "Crashes",
title = "EBR Urban 2-Lane Crashes")
fit_dcmp |> gg_tsresiduals()
fit_dcmp <- crashes_w_20 |>
model(stlf = decomposition_model(
STL(crashCount ~ season(window = "periodic") + trend(window = 52), robust = TRUE),
NAIVE(crashCount)
))
fc <- fit_dcmp |>
forecast(h=10)
fc|>
autoplot(crashes_w_20)+
labs(y = "Crashes",
title = "EBR Urban 2-Lane Crashes")
fit_dcmp <- crashes_w_20 |>
model(stlf = decomposition_model(
STL(crashCount ~ season(window = "periodic") + trend(window = 26), robust = TRUE),
NAIVE(crashCount)
))
fc <- fit_dcmp |>
forecast(h=10)
fc|>
autoplot(crashes_w_20)+
labs(y = "Crashes",
title = "EBR Urban 2-Lane Crashes")
fit_dcmp <- crashes_w_20 |>
model(stlf = decomposition_model(
STL(crashCount ~ season(window = "periodic") + trend(window = 26), robust = TRUE),
SNAIVE(crashCount)
))
fc <- fit_dcmp |>
forecast(h=10)
fc|>
autoplot(crashes_w_20)+
labs(y = "Crashes",
title = "EBR Urban 2-Lane Crashes")
fit_dcmp |> gg_tsresiduals()
augment(fit_dcmp)
augment(fit_dcmp) |>
autoplot(crashes_w_20)
View(fit_dcmp)
augment(fit_dcmp) |>
ggplot(aes(x = Week)) +
geom_line(aes(y = crashCount, colour = "Data")) +
geom_line(aes(y = .fitted, colour = "Fitted")) +
scale_colour_manual(
values = c(Data = "black", Fitted = "#D55E00")
) +
labs(y = "crashes",
title = "EBR Urban 2-Lane Crashes") +
guides(colour = guide_legend(title = "Series"))
fit_dcmp <- crashes_w_20 |>
model(stlf = decomposition_model(
STL(crashCount ~ season(window = "periodic") + trend(window = 26), robust = FALSE),
SNAIVE(crashCount)
))
fc <- fit_dcmp |>
forecast(h=10)
fc|>
autoplot(crashes_w_20)+
labs(y = "Crashes",
title = "EBR Urban 2-Lane Crashes")
fit_dcmp |> gg_tsresiduals()
augment(fit_dcmp) |>
ggplot(aes(x = Week)) +
geom_line(aes(y = crashCount, colour = "Data")) +
geom_line(aes(y = .fitted, colour = "Fitted")) +
scale_colour_manual(
values = c(Data = "black", Fitted = "#D55E00")
) +
labs(y = "crashes",
title = "EBR Urban 2-Lane Crashes") +
guides(colour = guide_legend(title = "Series"))
# ==== Fourier Analysis ====
fourier_crash <- crashes_w_20 |>
model(TSLM(crashCount ~ trend() + fourier(K = 2)))
report(fourier_crash)
fourier_crash |>
forecast(h=10)
fcfc <- fourier_crash |>
forecast(h=10)
fcfc |>
autoplot(crashes_w_20)
fourier_crash |> gg_tsresiduals()
augment(fourier_crash) |>
ggplot(aes(x = Week)) +
geom_line(aes(y = crashCount, colour = "Data")) +
geom_line(aes(y = .fitted, colour = "Fitted")) +
scale_colour_manual(
values = c(Data = "black", Fitted = "#D55E00")
) +
labs(y = "crashes",
title = "EBR Urban 2-Lane Crashes") +
guides(colour = guide_legend(title = "Series"))
augment(fourier_crash) |>
ggplot(aes(x = Week)) +
geom_line(aes(y = crashCount, colour = "Data")) +
geom_line(aes(y = .fitted, colour = "Fitted")) +
scale_colour_manual(
values = c(Data = "black", Fitted = "#D55E00")
) +
labs(y = "crashes",
title = "EBR Urban 2-Lane Crashes Fourier Model") +
guides(colour = guide_legend(title = "Series"))
games <- read.csv('Datasets/lsu-schedule-scrape-18-23.csv')
# convert games to weekly tsibble
games_w <- games |>
mutate(Week = yearweek(date),
home = ifelse(location == 'Home',1,0)) |>
group_by(Week) |>
summarise(home = sum(home)) |>
as_tsibble(index=Week)
View(games_w)
merge(crashes_w_20,games_w)
View(merge(crashes_w_20,games_w))
View(merge(crashes_w_20,games_w,all = TRUE))
crashes_w <- crashes_merge(crashes_w,games_w,all = TRUE)
crashes_w <- merge(crashes_w,games_w,all = TRUE)
View(crashes_w)
crashes_w[is.na(crashes_w)] <- 0
View(crashes_w)
crashes_w_20 <- crashes_w |>
filter(HighwayClass == 20)
View(crashes_w_20)
source("C:/Users/malle/projects/TimeSeries_fpp3_2024/crashes.R")
source("C:/Users/malle/projects/TimeSeries_fpp3_2024/crashes.R")
View(crashes_w)
crashes_w
crashes_w
crashes_w |>
filter(HighwayClass == 20) |>
autoplot(crashCount)
crashes_w <- crashes_w |>
as_tsibble(index = Week)
crashes_w <- crashes_w |>
as_tsibble(index = Week, key = HighwayClass)
crashes_w
source("C:/Users/malle/projects/TimeSeries_fpp3_2024/crashes.R")
# Plotting Moving Averages
crashes_w_20 |>
autoplot(crashCount, color='grey') +
geom_line(aes(y = `5-MA`, color = "5-MA")) +
geom_line(aes(y = `4-MA`, color = "4-MA")) +
geom_line(aes(y = `2x4-MA`, color = "2x4-MA")) +
geom_line(aes(y = `26-MA`, color = "26-MA")) +
scale_color_manual(values = c("5-MA" = "#D55E00", "4-MA" = "blue", "2x4-MA" = "green","26-MA"="purple")) +
theme(legend.position = c(0.7, 0.2)) +
labs(y = 'Crashes',
title = 'EBR Hwy Class 20 Moving Avg Crashes',
color = 'Moving Averages')
crashes_w_20 |>
model(
classical_decomposition(season_adjust, type = 'additive')
) |>
components() |>
autoplot() +
labs(title="Seasonally Adjusted additive decomposition of EBR Hwy Class 20 crashes")
fit_game <- crashes_w_20 |>
model(TSLM(crashCount ~ trend() + season() + home))
summary(fit_game)
report(fit_game)
fit_game <- crashes_w_20 |>
model(TSLM(crashCount ~ trend() + home))
report(fit_game)
fit_game |> gg_tsresiduals()
augment(fit_game) |>
ggplot(aes(x = Week)) +
geom_line(aes(y = crashCount, colour = "Data")) +
geom_line(aes(y = .fitted, colour = "Fitted")) +
scale_colour_manual(
values = c(Data = "black", Fitted = "#D55E00")
) +
labs(y = "crashes",
title = "EBR Urban 2-Lane Crashes") +
guides(colour = guide_legend(title = "Series"))
fit_game <- crashes_w_20 |>
model(TSLM(crashCount ~ trend() + season() + home))
report(fit_game)
fit_game |> gg_tsresiduals()
augment(fit_game) |>
ggplot(aes(x = Week)) +
geom_line(aes(y = crashCount, colour = "Data")) +
geom_line(aes(y = .fitted, colour = "Fitted")) +
scale_colour_manual(
values = c(Data = "black", Fitted = "#D55E00")
) +
labs(y = "crashes",
title = "EBR Urban 2-Lane Crashes") +
guides(colour = guide_legend(title = "Series"))
covid <- read_excel('Datasets/covid variable.xlsx')
# convert covid to weekly tsibble
covid_w <- covid |>
mutate(Week = yearweek(date)) |>
group_by(Week) |>
summarise(covid = max(covid)) |>
as_tsibble(index=Week) |>
ungroup()
View(covid_w)
source("C:/Users/malle/projects/TimeSeries_fpp3_2024/crashes.R")
View(crashes_w_20)
source("C:/Users/malle/projects/TimeSeries_fpp3_2024/crashes.R")
fit_game <- crashes_w_20 |>
model(TSLM(crashCount ~ trend() + season() + home + covid))
report(fit_game)
fit_game |> gg_tsresiduals()
augment(fit_game) |>
ggplot(aes(x = Week)) +
geom_line(aes(y = crashCount, colour = "Data")) +
geom_line(aes(y = .fitted, colour = "Fitted")) +
scale_colour_manual(
values = c(Data = "black", Fitted = "#D55E00")
) +
labs(y = "crashes",
title = "EBR Urban 2-Lane Crashes") +
guides(colour = guide_legend(title = "Series"))
fit_game <- crashes_w_20 |>
model(TSLM(crashCount ~ trend() + season_adjust + home + covid))
report(fit_game)
fit_game |> gg_tsresiduals()
augment(fit_game) |>
ggplot(aes(x = Week)) +
geom_line(aes(y = crashCount, colour = "Data")) +
geom_line(aes(y = .fitted, colour = "Fitted")) +
scale_colour_manual(
values = c(Data = "black", Fitted = "#D55E00")
) +
labs(y = "crashes",
title = "EBR Urban 2-Lane Crashes") +
guides(colour = guide_legend(title = "Series"))
