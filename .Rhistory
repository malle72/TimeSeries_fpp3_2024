pro$LI$z
mean(pro$LI$z)
mean(pro$LI$par.val)
glm(y~factor(color),data=crabs,family=binomial)
color_model <- glm(y~factor(color),data=crabs,family=binomial)
anova(color_model);confit(color_model)
anova(color_model);confint(color_model)
lrtest(color_model)
color_num_model <- glm(y~color,family = binomial, data = crabs)
summary(color_num_model)
logitmfx(color_num_model)
logitmfx(color_num_model,data = crabs)
logitmfx(color_model,data = crabs)
logitor(color_num_model)
logitor(color_num_model,data=crabs)
w_c_model <- glm(y~weight+color, family = binomial, data=crabs)
w_c_model
exp(1.1886)
exp(0.5)
exp(0.3)
race <- c(1,1,1,0,0,0)
religion <- c(0,1,2,0,1,2)
yes <- c(817,519,48,298,39,119)
no <- c(250,194,9,86,13,38)
belief <- cbind.data.frame(race, religion, yes, no)
belief
b_model <- glm(yes/no ~ race + religion, family = binomial)
belief2 <- cbind.data.frame(belief,n=belief$yes+belief$no)
belief2
b_model <- glm(yes/n ~ factor(race) + factor(religion), family = binomial)
b_model <- glm(yes/n ~ factor(race) + factor(religion), family = binomial, data=belief2)
b_model
b_model <- glm(yes/n ~ factor(race), family = binomial, data=belief2)
b_model
b_model <- glm(yes/n ~ factor(race) + factor(religion), family = binomial, data=belief2, weights = n)
b_model
b_model_race <- glm(yes/n ~ factor(race), family = binomial, data=belief2, weights = n)
b_model_religion <- glm(yes/n ~ factor(religion), family = binomial, data=belief2, weights = n)
anova(b_model_race, b_model_religion, test='LRT')
summary(b_model_race)
summary(b_model_religion)
factor(religion)
factor(religion)[1]
factor(religion)[1:]
factor(religion)[1:3]
factor(religion)[2]
factor(religion)
belief
belief2
b_model
anova(b_model, b_model_religion, b_model_race,test='LRT')
b_model <- glm(yes/n ~ factor(race) + factor(religion) + factor(race)*factor(religion), family = binomial, data=belief2, weights = n)
b_model
b_model_inter <- glm(yes/n ~ factor(race) + factor(religion) + factor(race)*factor(religion), family = binomial, data=belief2, weights = n)
b_model <- glm(yes/n ~ factor(race) + factor(religion), family = binomial, data=belief2, weights = n)
anova(b_model,b_model_race,b_model_religion, b_model_inter, test='LRT')
religion <- c('Protestant','Catholic','Other','Protestant','Catholic','Other')
belief <- cbind.data.frame(race, religion, yes, no)
belief2 <- cbind.data.frame(belief,n=belief$yes+belief$no)
b_model <- glm(yes/n ~ factor(race) + factor(religion), family = binomial, data=belief2, weights = n)
b_model_inter <- glm(yes/n ~ factor(race) + factor(religion) + factor(race)*factor(religion), family = binomial, data=belief2, weights = n)
b_model_race <- glm(yes/n ~ factor(race), family = binomial, data=belief2, weights = n)
b_model_religion <- glm(yes/n ~ factor(religion), family = binomial, data=belief2, weights = n)
anova(b_model,b_model_race,b_model_religion, b_model_inter, test='LRT')
b_model_inter <- glm(yes/n ~ factor(race) + factor(religion) + factor(race):factor(religion), family = binomial, data=belief2, weights = n)
anova(b_model,b_model_race,b_model_religion, b_model_inter, test='LRT')
summary(b_model_inter)
anova(b_model,b_model_inter,b_model_religion)
anova(b_model,b_model_inter,b_model_religion, test='LRT')
belief3 <- data.frame(cbind(belief2, protestant=ifelse(belief2$religion=="protestant",1,0)))
protestant.glm <- glm(yes/n~protestant, data=belief3, family=binomial, weights=n)
summary(protestant.glm)
belief3 <- data.frame(cbind(belief2, protestant=ifelse(belief2$religion=="Protestant",1,0)))
protestant.glm <- glm(yes/n~protestant, data=belief3, family=binomial, weights=n)
summary(protestant.glm)
anova(b_model_religion,protestant.glm, test = 'LRT')
b_model_religion
astro_df <- cbind.data.frame(c('<High School','High School','Junior College','Bachelor','Graduate'),c(23,50,4,11,1),c(98,574,122,268,148))
astro_df
astro_df(colnames(x=c('Degree','Very','Not at All')))
colnames(astro_df) = c('Degree','Very','Not at All')
astro_df
astro_df <- cbind.data.frame(astro_df, c(0,1,2,3,4))
astro_df
colnames(astro_df) = c('Degree','Very','Not at All','degree_score')
astro_df
astro_df <- cbind.data.frame(astro_df, astro_df$Very + astro_df$`Not at All`)
colnames(astro_df)=c('Degree','Very','Not at All','degree_score','n')
astro_df
astro_model <- glm(Very/n ~ degree_score, family = binomial, test='LR Test')
astro_model <- glm(Very/n ~ degree_score, family = binomial, test='LR Test', data=astro_df)
astro_model <- glm(Very/n ~ degree_score, family = binomial, test="LR Test", data=astro_df)
astro_model <- glm(Very/n ~ degree_score, family = binomial, test="LR test", data=astro_df)
astro_model <- glm(Very/n ~ degree_score, family = binomial, test="LRTest", data=astro_df)
astro_model <- glm(Very/n ~ degree_score, family = binomial, test="LR test", data=astro_df)
astro_model <- glm(Very/n ~ degree_score, family = binomial, data=astro_df)
wald(astro_model)
waldtest(astro_model)
library(lmtest)
waldtest(astro_model)
summary(astro_model)
df(astro_model)
astro_model
astro_model$terms
astro_model$coefficients
astro_model$coefficients[1]
astro_model$coefficients[2]
astro_model$coefficients[2][1]
anova(astro_model$effects)
astro_model$effects
astro_model$effects[2]
astro_model$effects[3]
anova(astro_model$effects[2])
anova(astro_model,test = 'LRT')
lrtest(astro_model)
lrtest(astro_model,glm(Very/n~1,family = binomial, data=astro_df))
lrtest(glm(Very/n~1,family = binomial, data=astro_df),astro_model)
deviance(astro_model)
summary(astro_model)
library(stats)
library(car)
library(psych)
sd(astro_df)
sd(astro_df$Very)
sd(astro_df$Very/astro_df$n)
library(car)
library(statmod)
library(psych)
library(lmtest)
lrtest(astro_model)
logLik(astro_model)
dbinom(89,1299)
dbinom(89,1299,89/1299)
89/1299
library(MASS)
crabs
survey
logLik(astro_df)
logLik(astro_df$Degree)
lrtest(astro_df$Degree)
lrtest(astro_model)
deviance(astro_model)
dnorm(8.5,mean = 3.812,sd = 2.41)
library(binom)
binom.probit(0.5,867)
library(distributional)
install.packages(VGAM)
install.packages("VGAM")
library(VGAM)
gators <- read.table("http://www.stat.ufl.edu/~aa/cat/data/Alligators.dat", header = TRUE)
fit <- vglm(y~x, family = multinomial, data=gators)
coef(fit, matrix=TRUE)
summary(fit)
crabs
library(readr)
crabs <- read_csv("C:/Users/malle/OneDrive - Louisiana State University/MSA Spring/EXST 7036/crabs.csv")
View(crabs)
library(psych)
library(MASS)
library(car)
library(dplyr)
attach(crabs)
crab_model <- glm(y ~ weight + width, family = binomial(link = 'logit'))
crab_model
summary(crab_model)
deviance(crab_model)
deviance(crab_model$coefficients)
deviance(crab_model$effects)
deviance(crab_model$coefficients)
deviance(crab_model$linear.predictors)
crab_model$linear.predictors
crab_model$coefficients
crab_model$coefficients[2:3]
deviance(crab_model$coefficients[2:3])
deviance(crab_model$coefficients[2])
cb_mod2 <- glm(y~weight+width,family = poisson(link = "log"))
summary(cb_mod2)
deviance(cb_mod2)
deviance(cb_mod2)
logLik(cb_mod2)
logLik(crab_model)
crab_model
summary(crab_model)
lrtest
help(lrtest)
??lrtest
library(binom)
dwtest
library(car)
binom.agresti.coull(sum(crabs$y),length(crabs))
crabs$y
attach(crabs)
y
binom.agresti.coull(crabs$y,crabs)
binom.agresti.coull(crabs$y,crabs$y)
lrtest(crab_model)
library(lmtest)
lrtest(crab_model)
install.packages("cowplot")
logLik(crab_model)
logLik(cb_mod2)
exp(-155.3603)
library(MASS)
library(car)
job <- data.frame(cbind(c('f','f','m','m'),c('h','l','h','l'),c(2,10,0,4),c(3,13,2,7),c(17,7,4,3),c(13,2,8,3)))
colnames(jobs)<-c('gender','income','vun','lsat','modsat','vsat')
colnames(job)<-c('gender','income','vun','lsat','modsat','vsat')
job
xtabs(~gender+income,data = job)
xtabs(~gender+income+vun+lsat+modsat+vsat,data = job)
View(job)
xtabs(vun+lsat+modsat+modsat+vsat~gender+income,data = job)
xtabs(cbind(vun,lsat,modsat,modsat,vsat)~gender+income,data = job)
xtabs(rowsum(cbind(vun,lsat,modsat,modsat,vsat))~gender+income,data = job)
rowsum(cbind(vun,lsat,modsat,modsat,vsat))
attach(job)
xtabs(rowsum(cbind(vun,lsat,modsat,modsat,vsat))~gender+income,data = job)
rowsum(cbind(vun,lsat,modsat,modsat,vsat))
library(car)
library(MASS)
income <- c('bavg','avg','aavg')
happy <- c('not','pretty','well')
bavg <- c (6, 43, 75)
avg<-c(6, 113, 178)
aavg<-c(6, 57, 117)
library(stats)
1-pchisq(27.6249,20)
1-pchisq(28.0122,20)
1-pchisq(530.2,27)
exp(-3.43)
exp(-0.009)
-0.01+1.96*0.0007
exp(-3)
exp(-0.1637+0.9346)/(1+exp(-0.1637+0.9346))
0.4957^2
0.8447^2
exp(0.6837)
-0.1637+0.9346
0.7709-1.96*0.8134
0.7709+1.96*0.8134
exp(0.7709-1.96*0.8134)
exp(-0.823364)
exp(-0.823364)/(1+exp(-0.823364))
exp(2.365164)/(1+exp(2.365164))
clearPushBack()
clean
library(devtools)
devtools::install_github("mkearney/rmd2jupyter")
library(rmd2jupyter)
rmd2jupyter("C:\Users\malle\OneDrive - Louisiana State University\MSA Spring\ISDS 4118\grad project\example.Rmd")
rmd2jupyter("C:\\Users\\malle\\OneDrive - Louisiana State University\\MSA Spring\\ISDS 4118\\grad project\\example.Rmd")
rmd2jupyter("C:\\Users\\malle\\OneDrive - Louisiana State University\\MSA Spring\\ISDS 4118\\grad project\\example.Rmd")
install.packages('fpp3')
library(fpp3)
source("~/.active-rstudio-document")
global_economy
source("~/.active-rstudio-document")
View(my_data)
setwd("C:/Users/malle/projects/TimeSeries_fpp3_2024/Chapter 3/exercises")
library(fpp3)
canadian_gas |> autoplot(Volume)
cg_lambda <- canadian_gas |>
features(Volume, features = guerrero)|>
pull(lambda_guerrero)
canadian_gas |>
autoplot(box_cox(Volume,cg_lambda))
dcmp <- canadian_gas |>
model(classical_decomposition(Volume))
components(dcmp) |>
autoplot()
# 7
# Last 5 years of gas data
gas <- tail(aus_production, 5*4) |> select(Gas)
# a
gas |>
autoplot(Gas)
gas_full <- aus_production |> select(Gas)
# a
gas_full |>
autoplot(Gas)
# b
dcmp_gas <- gas |>
model(classical_decomposition(Gas,type='multiplicative'))
View(dcmp_gas)
# c
components(dcmp_gas) |>
autoplot()
# d
components(dcmp_gas) |>
autoplot(season_adjust)
# e
gas_out <- gas |>
mutate(Gas = ifelse(row_number() == 12, Gas+300,Gas))
# Recompute decomposition
dcmp_gas_out <- gas_out |>
model(classical_decomposition(Gas,type='multiplicative'))
# Plot new seasonal adj data
components(dcmp_gas_out) |>
autoplot(season_adjust)
# e
gas_out <- gas |>
mutate(Gas = ifelse(row_number() == 1, Gas+300,Gas))
# Recompute decomposition
dcmp_gas_out <- gas_out |>
model(classical_decomposition(Gas,type='multiplicative'))
# Plot new seasonal adj data
components(dcmp_gas_out) |>
autoplot(season_adjust)
# e
gas_out <- gas |>
mutate(Gas = ifelse(row_number() == 19, Gas+300,Gas))
# Recompute decomposition
dcmp_gas_out <- gas_out |>
model(classical_decomposition(Gas,type='multiplicative'))
# Plot new seasonal adj data
components(dcmp_gas_out) |>
autoplot(season_adjust)
# e
gas_out <- gas |>
mutate(Gas = ifelse(row_number() == 20, Gas+300,Gas))
# Recompute decomposition
dcmp_gas_out <- gas_out |>
model(classical_decomposition(Gas,type='multiplicative'))
# Plot new seasonal adj data
components(dcmp_gas_out) |>
autoplot(season_adjust)
components(dcmp_gas_out) |>
autoplot()
# e
gas_out <- gas |>
mutate(Gas = ifelse(row_number() == 12, Gas+300,Gas))
# Recompute decomposition
dcmp_gas_out <- gas_out |>
model(classical_decomposition(Gas,type='multiplicative'))
# Plot new seasonal adj data
components(dcmp_gas_out) |>
autoplot(season_adjust)
components(dcmp_gas_out) |>
autoplot()
# e
gas_out <- gas |>
mutate(Gas = ifelse(row_number() == 1, Gas+300,Gas))
# Recompute decomposition
dcmp_gas_out <- gas_out |>
model(classical_decomposition(Gas,type='multiplicative'))
# Plot new seasonal adj data
components(dcmp_gas_out) |>
autoplot(season_adjust)
components(dcmp_gas_out) |>
autoplot()
library(readxl)
crashes <- read_excel("EBR Daily by Hwy Class.xlsx")
setwd("C:/Users/malle/projects/TimeSeries_fpp3_2024")
crashes <- read_excel("EBR Daily by Hwy Class.xlsx")
# convert tibble to tsibble (monthly)
crashes_w <- crashes |>
mutate(Week = yearweek(CrashDate)) |>
group_by(Week, HighwayClass) |>
summarise(
Crashes = sum(Crashes),
Pedestrian = sum(Pedestrian),
Bicycle = sum(Bicycle),
NonMotorist = sum(NonMotorist),
Motorcycle = sum(Motorcycle),
Fatal = sum(Fatal)
) |>
as_tsibble(index = Week, key = HighwayClass)
# renaming column Crashes -> crashCount
crashes_w <- mutate(crashes_w, crashCount = Crashes)
# convert tibble to tsibble (monthly)
crashes_w <- crashes |>
mutate(Week = yearweek(CrashDate)) |>
group_by(Week, HighwayClass) |>
summarise(
crashCount = sum(crashCount),
Pedestrian = sum(Pedestrian),
Bicycle = sum(Bicycle),
NonMotorist = sum(NonMotorist),
Motorcycle = sum(Motorcycle),
Fatal = sum(Fatal)
) |>
as_tsibble(index = Week, key = HighwayClass)
# renaming column Crashes -> crashCount
crashes_w <- mutate(crashes_w, crashCount = Crashes)
crashes_w = crashes_w |>
mutate(PercentFatal = Fatal/crashCount)
# Moving Average
crashes_w_20 <- crashes_w |>
filter(HighwayClass == 20) |>
fill_gaps() |> replace_na(list(crashCount=0)) |>
ungroup() |>
mutate(
`5-MA` = slider::slide_dbl(crashCount, mean,
.before = 2, .after = 2, .complete = TRUE),
`4-MA` = slider::slide_dbl(crashCount, mean,
.before = 1, .after = 2, .complete = TRUE),
`2x4-MA` = slider::slide_dbl(`4-MA`, mean,
.before = 1, .after = 0, .complete = TRUE)
)
crashes_w_20 |>
autoplot(crashCount, color='grey') +
geom_line(aes(y = `5-MA`, color = "5-MA")) +
geom_line(aes(y = `4-MA`, color = "4-MA")) +
geom_line(aes(y = `2x4-MA`, color = "2x4-MA")) +
scale_color_manual(values = c("5-MA" = "#D55E00", "4-MA" = "blue", "2x4-MA" = "green")) +
theme(legend.position = c(0.75, 0.9)) +
labs(y = 'Crashes',
title = 'EBR Hwy Class 20 Moving Avg Crashes',
color = 'Moving Averages')
crashes_w_20 |>
ungroup() |>
model(
classical_decomposition(crashCount, type = 'multiplicative')
) |>
components() |>
autoplot() +
labs(title="Classical additive decomposition of EBR Hwy Class 20 crashes")
# Moving Average
crashes_w_20 <- crashes_w |>
filter(HighwayClass == 20) |>
fill_gaps() |> replace_na(list(crashCount=0)) |>
ungroup() |>
mutate(
`5-MA` = slider::slide_dbl(crashCount, mean,
.before = 2, .after = 2, .complete = TRUE),
`4-MA` = slider::slide_dbl(crashCount, mean,
.before = 1, .after = 2, .complete = TRUE),
`2x4-MA` = slider::slide_dbl(`4-MA`, mean,
.before = 1, .after = 0, .complete = TRUE),
`26-MA` = slider::slide_dbl(crashCount, mean,
.before = 12, .after = 13, .complete = TRUE)
)
crashes_w_20 |>
autoplot(crashCount, color='grey') +
geom_line(aes(y = `5-MA`, color = "5-MA")) +
geom_line(aes(y = `4-MA`, color = "4-MA")) +
geom_line(aes(y = `2x4-MA`, color = "2x4-MA")) +
geom_line(aes(y = `26-MA`, color = "26-MA")) +
scale_color_manual(values = c("5-MA" = "#D55E00", "4-MA" = "blue", "2x4-MA" = "green","26-MA"="purple")) +
theme(legend.position = c(0.75, 0.9)) +
labs(y = 'Crashes',
title = 'EBR Hwy Class 20 Moving Avg Crashes',
color = 'Moving Averages')
crashes_w_20 |>
autoplot(crashCount, color='grey') +
geom_line(aes(y = `5-MA`, color = "5-MA")) +
geom_line(aes(y = `4-MA`, color = "4-MA")) +
geom_line(aes(y = `2x4-MA`, color = "2x4-MA")) +
geom_line(aes(y = `26-MA`, color = "26-MA")) +
scale_color_manual(values = c("5-MA" = "#D55E00", "4-MA" = "blue", "2x4-MA" = "green","26-MA"="purple")) +
theme(legend.position = c(0.75, 0.3)) +
labs(y = 'Crashes',
title = 'EBR Hwy Class 20 Moving Avg Crashes',
color = 'Moving Averages')
crashes_w_20 |>
autoplot(crashCount, color='grey') +
geom_line(aes(y = `5-MA`, color = "5-MA")) +
geom_line(aes(y = `4-MA`, color = "4-MA")) +
geom_line(aes(y = `2x4-MA`, color = "2x4-MA")) +
geom_line(aes(y = `26-MA`, color = "26-MA")) +
scale_color_manual(values = c("5-MA" = "#D55E00", "4-MA" = "blue", "2x4-MA" = "green","26-MA"="purple")) +
theme(legend.position = c(0.75, 0.2)) +
labs(y = 'Crashes',
title = 'EBR Hwy Class 20 Moving Avg Crashes',
color = 'Moving Averages')
crashes_w_20 |>
autoplot(crashCount, color='grey') +
geom_line(aes(y = `5-MA`, color = "5-MA")) +
geom_line(aes(y = `4-MA`, color = "4-MA")) +
geom_line(aes(y = `2x4-MA`, color = "2x4-MA")) +
geom_line(aes(y = `26-MA`, color = "26-MA")) +
scale_color_manual(values = c("5-MA" = "#D55E00", "4-MA" = "blue", "2x4-MA" = "green","26-MA"="purple")) +
theme(legend.position = c(0.7, 0.2)) +
labs(y = 'Crashes',
title = 'EBR Hwy Class 20 Moving Avg Crashes',
color = 'Moving Averages')
dcmp <- crashes_w_20 |>
ungroup() |>
model(classical_decomposition(crashCount, type = 'multiplicative'))
components(dcmp)
dn_crashes_w_20 <- components(dcmp)$random
dn_crashes_w_20 <- crashes_w_20$crashCount - components(dcmp)$random
dn_crashes_w_20
autoplot(dn_crashes_w_20)
crashes_w_20 <- crashes_w_20 |>
mutuate(denoise = dn_crashes_w_20)
crashes_w_20 <- crashes_w_20 |>
mutate(denoise = dn_crashes_w_20)
crashes_w_20 |>
ungroup() |>
model(
classical_decomposition(crashCount, type = 'multiplicative')
) |>
components() |>
autoplot() +
labs(title="Classical multiplicative decomposition of EBR Hwy Class 20 crashes")
crashes_w_20 |>
ungroup() |>
model(
classical_decomposition(crashCount, type = 'additive')
) |>
components() |>
autoplot() +
labs(title="Classical additive decomposition of EBR Hwy Class 20 crashes")
crashes_w_20 |>
ungroup() |>
model(
classical_decomposition(denoise, type = 'additive')
) |>
components() |>
autoplot() +
labs(title="Denoised additive decomposition of EBR Hwy Class 20 crashes")
