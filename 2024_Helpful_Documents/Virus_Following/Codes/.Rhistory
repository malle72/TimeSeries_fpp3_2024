}
# usage
packages <- c("ggplot2", "plyr", "reshape2", "RColorBrewer", "scales", "grid","lidia")
ipak(packages)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage
packages <- c("ggplot2", "plyr", "reshape2", "RColorBrewer", "scales", "grid","lindia")
ipak(packages)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage
packages <- c("ggplot2", "plyr", "reshape2", "RColorBrewer", "scales", "grid","lindia","easupackages")
ipak(packages)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# usage
packages <- c("ggplot2", "plyr", "reshape2", "RColorBrewer", "scales", "grid","lindia","easypackages")
ipak(packages)
install.packages("easypackages")
knitr::opts_chunk$set(echo = TRUE,fig.align = 'center')
options(scipen = 1, digits = 3)
library(easypackages)
knitr::opts_chunk$set(echo = TRUE,fig.align = 'center')
options(scipen = 1, digits = 3)
library(easypackages)
libraries("lsr","psych","car","agricolae","tidyverse","knitr")
libraries("kableExtra","emmeans","multcomp","gtsummary","lindia","rstatix","broom")
library(easypackages)
libraries("lsr","psych","car","agricolae","tidyverse","knitr")
libraries("kableExtra","emmeans","multcomp","gtsummary","lindia","rstatix","broom")
ipak("lsr","psych","car","agricolae","tidyverse","knitr")
ipak(packages)
library(easypackages)
libraries("lsr","psych","car","agricolae","tidyverse","knitr")
libraries("kableExtra","emmeans","multcomp","gtsummary","lindia","rstatix","broom")
install.packages("emmeans")
install.packages("lindia")
install.packages("gtsummary")
library(easypackages)
libraries("lsr","psych","car","agricolae","tidyverse","knitr")
libraries("kableExtra","emmeans","multcomp","gtsummary","lindia","rstatix","broom")
library(easypackages)
libraries("lsr","psych","car","agricolae","tidyverse","knitr")
libraries("kableExtra","emmeans","multcomp","gtsummary","lindia","rstatix","broom")
install.packages("multcomp")
library(easypackages)
libraries("lsr","psych","car","agricolae","tidyverse","knitr")
libraries("kableExtra","emmeans","multcomp","gtsummary","lindia","rstatix","broom")
install.packages("rstatix")
install.packages("multcompView")
install.packages("rstatix")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("tinytex")
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
install.packages("rlang")
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
setwd("G:/My Drive/01_Collaborations/01_Current/01_LSU/Digital_Ag/Digital_Ag_Class/01_General/Notes/07_Timeseries/Virus_Following/Codes")
rm(list = ls())
library(easypackages)
libraries("fpp2","zoo","tidyverse","lubridate","GGally","gridExtra","ggrepel","foreign", "urca","psych","hydroGOF")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./Functions/TSConvert.R") # adds the function
install.packages("fpp2")
install.packages("hydroGOF")
rm(list = ls())
library(easypackages)
libraries("fpp2","zoo","tidyverse","lubridate","GGally","gridExtra","ggrepel","foreign", "urca","psych","hydroGOF")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
install.packages("urca")
rm(list = ls())
library(easypackages)
libraries("fpp2","zoo","tidyverse","lubridate","GGally","gridExtra","ggrepel","foreign", "urca","psych","hydroGOF")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#============= Load libraries====================
rm(list = ls())
library(easypackages)
libraries("fpp2","zoo","tidyverse","lubridate","GGally","gridExtra","ggrepel","foreign", "urca","psych","hydroGOF")
source("./Functions/TSConvert.R") # adds the function
df=read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv")
df1=df%>%filter(state=="Louisiana")%>%select(date,cases,deaths)
colnames(df1)=c("Date","Cases","Deaths")
write.csv(df1,"../Data/Processed/Cleandata1.csv")
df1$Date=as.Date(df1$Date)
dir.create(paste0("../Results/",df1$Date[nrow(df1)]),showWarnings = F)
#===================== Simple Graph of Cumulative Cases ===========================
p1=ggplot(df1, aes(x=Date, y=Cases)) +
geom_point(size=0.5)+
scale_x_date(breaks = "1 month",date_labels="%b")+
geom_line(color="#00AFBB") + xlab("") + ylab("Daily Cases")+
ggtitle("Timeseries of Cumulative Cases")+
theme_classic()
ggsave(paste0("../Results/",df1$Date[nrow(df1)],"/Cases.jpg"),width=10,heigh=10,p1)
p1
p1=ggplot(df1, aes(x=Date, y=Deaths)) +
geom_point(size=0.5)+
scale_x_date(breaks = "1 month",date_labels="%b")+
geom_line(color="#00AFBB") + xlab("") + ylab("Daily Deaths")+
ggtitle("Timeseries of Cumulative Deaths")+
theme_classic()
ggsave(paste0("../Results/",df1$Date[nrow(df1)],"/Deaths.jpg"),width=10,heigh=10,p1)
p1
StartDay=df1$Date[1]
yr_mt_da=as.numeric(strsplit(as.character(StartDay),"-")[[1]])
Casests <- ts(df1$Cases, start=yr_mt_da,frequency=365.25)
Casets1=c(Casests[1],diff(Casests,1))
Casests_ma=ma(Casets1,7)
df1$DailyCases=as.vector(Casets1)
df1$Cases_ma=as.vector(Casests_ma)
Deathsts <- ts(df1$Deaths, start=yr_mt_da,frequency=365.25)
Deathsts1=c(Deathsts[1],diff(Deathsts,1))
Deathsts_ma=ma(Deathsts1,7)
df1$DailyDeaths=as.vector(Deathsts1)
df1$Deaths_ma=as.vector(Deathsts_ma)
SumStats=describe(df1,na.rm=TRUE,trim=0.1,quant=c(.25,.75))
write.csv(SumStats,paste0("../Results/",df1$Date[nrow(df1)],"/Summary_Statistics.csv"))
write.csv(df1,"../Data/Processed/Cleandata.csv")
View(SumStats)
SumStats=describe(df1,na.rm=TRUE,trim=0.1,quant=c(.25,.75))%>%select(-vars)
SumStats=describe(df1,na.rm=TRUE,trim=0.1,quant=c(.25,.75))%>%select(-vars)
View(SumStats)
write.csv(SumStats,paste0("../Results/",df1$Date[nrow(df1)],"/Summary_Statistics.csv"))
write.csv(df1,"../Data/Processed/Cleandata.csv")
#============= Train test split Setting parameters ================
d=0.05
h=10
k=round(nrow(df1)*d)
l=nrow(df1)-k
train=df1[1:l,]
test=df1[(l+1):nrow(df1),]
freq=365.25
Allcases_train=TSConvert(train,"Cases_ma",freq)
Allcases_test=TSConvert(test,"Cases_ma",freq)
AllCases=c(Allcases_train,Allcases_test)
#============= Analysis For Cases ===============================================================
#============= Creating Time series ============
Allcases_train=TSConvert(train,"Cases_ma",freq)
Allcases_test=TSConvert(test,"Cases_ma",freq)
AllCases=c(Allcases_train,Allcases_test)
#================ NN train and prediction =========================
fit1=nnetar(Allcases_train,p=7,Size=10,repeats=50,lambda = "auto")
for1=forecast(fit1,k)
autoplot(for1)
predictions1=for1$mean
autoplot(predictions1)
fit2=nnetar(Allcases_train)
for2=forecast(fit2,k)
autoplot(for2)
predictions2=for2$mean
autoplot(predictions2)
#================ ARIMA and prediction =========================
fit3=auto.arima(Allcases_train)
for3=forecast(fit3,h=k)
autoplot(for3)
predictions3=for3$mean
autoplot(predictions3)
fit4=arima(Allcases_train,order=c(4,0,1))
for4=forecast(fit4,k)
autoplot(for4)
predictions4=for4$mean
autoplot(predictions4)
#================ Comparing Predictions vs Truth ===================
results=data.frame(Date=test$Date,Test=test$Cases_ma,PredNN=as.vector(predictions1),
PredAutoNN=as.vector(predictions2),PredAutoARIMA=as.vector(predictions3),
PredARIMA=as.vector(predictions4))
results$Ensamble1=rowMeans(results[,c(3,5)])
results$Ensamble2=rowMeans(results[,3:6])
#================ Plotting Prediction vs Truth ====================
p1=ggplot() +
geom_line(data=df1, aes(x = Date, y = Cases_ma, colour = "Actual Values"))+
geom_line(data = results, aes(x = Date, y = Test, colour = "Actual Values")) +
geom_line(data = results, aes(x = Date, y = PredNN,   colour = "Predictions NN"))  +
geom_line(data = results, aes(x = Date, y = PredARIMA,   colour = "Predictions ARIMA"))  +
geom_line(data = results, aes(x = Date, y = PredAutoARIMA,   colour = "Predictions Auto ARIMA"))  +
geom_line(data = results, aes(x = Date, y = PredAutoNN,   colour = "Predictions Auto Neural Network"))  +
geom_line(data = results, aes(x = Date, y = Ensamble1,   colour = "Predictions Ensamble1"))  +
geom_line(data = results, aes(x = Date, y = Ensamble2,   colour = "Predictions Ensamble2"))  +
ylab('Cases')+
scale_x_date(breaks = "1 month",date_labels="%b")+
#scale_x_date(breaks=df1$Date ,labels=format(df1$Date,format="%m-%d"))+
ggtitle(paste0("Comparison of Predicted vs True Number of Smoothed (7) Cases for ",round(nrow(df1)*d)," days"))+
theme(axis.text.x = element_text(angle=45, hjust = 1))
ggsave(paste0("../Results/",df1$Date[nrow(df1)],"/Predictions_vs_Test_days_",k,"_Cases.jpg"),p1,width=10,heigh=8)
p1
#=============== Create Root Mean Square Errors ==================
RMSE=matrix(0,nrow=1,ncol = ncol(results)-2)
RMSE=as.data.frame(RMSE)
colnames(RMSE)=colnames(results[,3:ncol(results)])
for (i in 1:ncol(RMSE)){
RMSE[1,i]=rmse(results[,2],results[,i+2],na.rm=TRUE)
}
write.csv(RMSE,paste0("../Results/",df1$Date[nrow(df1)],"/Smoothed_7_RMSE_days_",k,"_Cases.csv"))
colnames(sort(RMSE[1,])[c(1,2)])
RMSE=matrix(0,nrow=1,ncol = ncol(results)-2)
RMSE=as.data.frame(RMSE)
colnames(RMSE)=colnames(results[,3:ncol(results)])
View(RMSE)
for (i in 1:ncol(RMSE)){
RMSE[1,i]=rmse(results[,2],results[,i+2],na.rm=TRUE)
}
write.csv(RMSE,paste0("../Results/",df1$Date[nrow(df1)],"/Smoothed_7_RMSE_days_",k,"_Cases.csv"))
colnames(sort(RMSE[1,])[c(1,2)])
View(RMSE)
View(RMSE)
results=data.frame(Date=test$Date,Test=test$Cases_ma,PredNN=as.vector(predictions1),
PredAutoNN=as.vector(predictions2),PredAutoARIMA=as.vector(predictions3),
PredARIMA=as.vector(predictions4))
View(results)
results$Ensamble1=rowMeans(results[,c(3,5)])
results$Ensamble2=rowMeans(results[,3:6])
#================ Plotting Prediction vs Truth ====================
p1=ggplot() +
geom_line(data=df1, aes(x = Date, y = Cases_ma, colour = "Actual Values"))+
geom_line(data = results, aes(x = Date, y = Test, colour = "Actual Values")) +
geom_line(data = results, aes(x = Date, y = PredNN,   colour = "Predictions NN"))  +
geom_line(data = results, aes(x = Date, y = PredARIMA,   colour = "Predictions ARIMA"))  +
geom_line(data = results, aes(x = Date, y = PredAutoARIMA,   colour = "Predictions Auto ARIMA"))  +
geom_line(data = results, aes(x = Date, y = PredAutoNN,   colour = "Predictions Auto Neural Network"))  +
geom_line(data = results, aes(x = Date, y = Ensamble1,   colour = "Predictions Ensamble1"))  +
geom_line(data = results, aes(x = Date, y = Ensamble2,   colour = "Predictions Ensamble2"))  +
ylab('Cases')+
scale_x_date(breaks = "1 month",date_labels="%b")+
#scale_x_date(breaks=df1$Date ,labels=format(df1$Date,format="%m-%d"))+
ggtitle(paste0("Comparison of Predicted vs True Number of Smoothed (7) Cases for ",round(nrow(df1)*d)," days"))+
theme(axis.text.x = element_text(angle=45, hjust = 1))
ggsave(paste0("../Results/",df1$Date[nrow(df1)],"/Predictions_vs_Test_days_",k,"_Cases.jpg"),p1,width=10,heigh=8)
p1
#=============== Create Root Mean Square Errors ==================
RMSE=matrix(0,nrow=1,ncol = ncol(results)-2)
RMSE=as.data.frame(RMSE)
colnames(RMSE)=colnames(results[,3:ncol(results)])
for (i in 1:ncol(RMSE)){
RMSE[1,i]=rmse(results[,2],results[,i+2],na.rm=TRUE)
}
write.csv(RMSE,paste0("../Results/",df1$Date[nrow(df1)],"/Smoothed_7_RMSE_days_",k,"_Cases.csv"))
#=============== Graphing the results with important dates ==============
geom.text.size = 4
theme.size = (14/5) * geom.text.size
Lck=as.Date("2020-03-22")
Ph2=Lck+74
Msk=Lck+111
ScOpen=Lck+151
Ph3=Lck+177
MPh2=Lck+248
Vac=Lck+288
Ph3N=Lck+346
p1=ggplot(df1, aes(x=Date, y=Cases_ma)) +
#geom_rect(xmin = ScOpen, xmax = ScOpen+5, ymin = -500, ymax = max(df1$Cases_Total)+500,alpha = .05,fill="lightgreen")+
geom_point(size=0.5)+
geom_line(data=df1, aes(x = Date, y = Cases_ma, colour = "Actual Values"))+
geom_line(data=results, aes(x = Date, y = PredNN, colour = "NN Predictions"))+
geom_text(x=Lck, y=1800, label="Lockdown",colour="red",size=geom.text.size)+
geom_vline(xintercept=Lck, linetype=4,colour="red")+
geom_text(x=Ph2, y=1000, label="Phase 2 Reopening",colour="green",size=geom.text.size)+
geom_vline(xintercept=Ph2, linetype=4,colour="green")+
geom_text(x=Msk, y=1500, label="Mask Mandate",colour="red",size=geom.text.size)+
geom_vline(xintercept=Msk, linetype=4,colour="red")+
geom_text(x=ScOpen, y=1300, label="Schools Open",colour="green",size=geom.text.size)+
geom_vline(xintercept=ScOpen, linetype=4,colour="green")+
#geom_vline(xintercept=ScOpen+5, linetype=4,colour="green")+
geom_text(x=Ph3, y=300, label="Phase 3 Reopening",colour="green",size=geom.text.size)+
geom_vline(xintercept=Ph3, linetype=4,colour="green")+
geom_text(x=MPh2, y=1100, label="Modified Phase 2",colour="green",size=geom.text.size)+
geom_vline(xintercept=MPh2, linetype=4,colour="green")+
geom_text(x=Vac, y=800, label="Vaccinations Started",colour="red",size=geom.text.size)+
geom_vline(xintercept=Vac, linetype=4,colour="red")+
geom_text(x=Ph3N, y=1100, label="Phase 3",colour="green",size=geom.text.size)+
geom_vline(xintercept=Ph3N, linetype=4,colour="green")+
scale_x_date(breaks = "1 month",date_labels="%b")+
ylab("Daily Cases")+
ggtitle(paste0("MA(7) Smoothed Timeseries of Covid19 Cases in Louisiana with ",h," days prediction"))+
theme_bw()+
theme(axis.text = element_text(size = theme.size, colour="black"))+
theme(legend.title = element_blank())
ggsave(paste0("../Results/",df1$Date[nrow(df1)],"/Smoothed_With_",h,"_days_prediction_Cases.jpg"),width=12,heigh=8,p1)
ggsave(paste0("../Results/Latest_Smoothed_With_",h,"_days_prediction_Cases.jpg"),width=12,heigh=8,p1)
setwd("G:/My Drive/01_Collaborations/01_Current/03_ODSA/01_Main_Analysis/Codes")
library("formatR")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE,fig.align = 'center', message = FALSE, tidy.opts=list(width.cutoff=60), tidy=TRUE)
options(scipen = 1, digits = 3)
library(easypackages)
libraries("tidyverse","psych","car","agricolae")
libraries("lsr","lme4","rstatix","emmeans","multcomp","multcompView","mvoutlier")
libraries("knitr","kableExtra","gtsummary","lindia","broom","usefun")
libraries("rlist","gridExtra","afex","ggpubr","tictoc","pander")
pander(data, style='rmarkdown' )
source("./Functions/All_Functions.r")
today <- Sys.Date()
today_str <- format(today, "%Y_%m_%d")
library(easypackages)
libraries("tidyverse","psych","car","agricolae","knitr","data.table")
libraries("lsr","lme4","rstatix","emmeans","multcomp","multcompView","mvoutlier")
libraries("kableExtra","gtsummary","lindia","broom","usefun")
libraries("rlist","gridExtra","afex","ggpubr","tictoc")
source("./Functions/All_Functions.r")
start_time <- Sys.time()
df01=fread("../Data/Raw/SSWD_POOL_V4.csv")
end_time <- Sys.time()
elapsed_time <- end_time - start_time
elapsed_seconds <- as.numeric(elapsed_time)
df02=df01%>%rename_all(toupper)%>% mutate(across(where(is.character), ~na_if(., "")))
l1=read.csv("../Data/Raw/AHCC.csv")%>%pull(CH_CURRICULUM_1)
df03=df02%>%separate(COHORTTRM_DESC, into = c("SEMESTER", "YEAR"), sep = " ")%>%filter(!CH_CURRICULUM_1 %in% l1 )
df04=df03%>%mutate(GRADUATED=as.factor(ifelse(is.na(DEGR_TERM), "NO", "YES")))%>%mutate(COMPLETED=as.factor(ifelse(GRADUATED=="NO"& YEAR<2018,"NO","YES")))
df04=df03%>%mutate(GRADUATED=as.factor(ifelse(is.na(DEGR_TERM), "NO", "YES")))%>%mutate(COMPLETED=as.factor(ifelse(GRADUATED=="NO"& YEAR<2018,"NO","YES")))
df05=df04%>% mutate(HSGPA1=HS_ACAD_AVG,HSGPA2=HS_OVERALL_AVG)%>%mutate(HSPLACEMENT = case_when(
HS_TOP_10 == 1 ~ "5",
HS_TOP_25 == 1 ~ "4",
HS_TOP_50 == 1 ~ "3",
HS_BOTTOM_25 == 1 ~ " 2",
HS_BOTTOM_50 == 1 ~ "1",
TRUE ~ NA_character_
))%>%select(-starts_with("HS_"))
df06=df05%>%
mutate(PRIORCREDITS = as.factor(if_else(if_any(starts_with("PC"), ~ !is.na(.) & . != ""), "YES", "NO")))%>% select(-starts_with("PC"))%>%
mutate(MULTILINGUAL = as.factor(if_else(if_any(starts_with("LANG"), ~ !is.na(.) & . != ""), "YES", "NO")))%>% select(-starts_with("LANG"))
describe(df06$BESTMATH)%>%as.data.frame()%>%select(n,mean,sd,median,min,max,skew,kurtosis)%>%remove_rownames()%>%rename_with(toupper)%>%
kable("html") %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
describe(df06$BESTMATH)%>%as.data.frame()%>%select(n,mean,sd,median,min,max,skew,kurtosis)%>%remove_rownames()%>%rename_with(toupper)%>%
kable("html") %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
ggdensity(df06$BESTMATH, fill = "lightgray")
ggqqplot(df06$BESTMATH)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE,fig.align = 'center', message = FALSE, tidy.opts=list(width.cutoff=80), tidy=TRUE)
options(scipen = 1, digits = 3)
setwd("G:/My Drive/01_Collaborations/01_Current/01_LSU/Digital_Ag/Digital_Ag_Class/01_General/Notes/07_Timeseries/Virus_Following/Codes")
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(easypackages)
libraries("fpp2","zoo","tidyverse","lubridate","GGally","gridExtra","ggrepel","foreign", "urca","psych","hydroGOF")
source("./Functions/TSConvert.R") # adds the function
df=read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv")
df1=df%>%filter(state=="Louisiana")%>%select(date,cases,deaths)
colnames(df1)=str_to_title(colnames(df1))
df1$Date=as.Date(df1$Date)
write.csv(df1,"../Data/Processed/Cleandata1.csv")
View(df1)
dir.create(paste0("../Results/",df1$Date[nrow(df1)]),showWarnings = F)
p1=ggplot(df1, aes(x=Date, y=Cases)) +
geom_point(size=0.5)+
scale_x_date(breaks = "1 month",date_labels="%b")+
geom_line(color="#00AFBB") + xlab("") + ylab("Daily Cases")+
ggtitle("Timeseries of Cumulative Cases")+
theme_classic()
ggsave(paste0("../Results/",df1$Date[nrow(df1)],"/Cases.jpg"),width=10,heigh=10,p1)
p1
dir.create(paste0("../Results/",df1$Date[nrow(df1)]),showWarnings = F)
p1=ggplot(df1, aes(x=Date, y=Cases)) +
geom_point(size=0.5)+
scale_x_date(breaks = "1 month",date_labels="%b")+
geom_line(color="#00AFBB") + xlab("") + ylab("Daily Cases")+
ggtitle("Timeseries of Cumulative Cases")+
theme_classic()
ggsave(paste0("../Results/",df1$Date[nrow(df1)],"/Cases.jpg"),width=10,heigh=10,p1)
p1
p1=ggplot(df1, aes(x=Date, y=Deaths)) +
geom_point(size=0.5)+
scale_x_date(breaks = "1 month",date_labels="%b")+
geom_line(color="#00AFBB") + xlab("") + ylab("Daily Deaths")+
ggtitle("Timeseries of Cumulative Deaths")+
theme_classic()
ggsave(paste0("../Results/",df1$Date[nrow(df1)],"/Deaths.jpg"),width=10,heigh=10,p1)
p1
StartDay=df1$Date[1]
yr_mt_da=as.numeric(strsplit(as.character(StartDay),"-")[[1]])
Casests <- ts(df1$Cases, start=yr_mt_da,frequency=365.25)
Casets1=c(Casests[1],diff(Casests,1))
Casests_ma=ma(Casets1,7)
df1$DailyCases=as.vector(Casets1)
df1$Cases_ma=as.vector(Casests_ma)
Casests <- ts(df1$Cases, start=yr_mt_da,frequency=365.25)
Casets1=c(Casests[1],diff(Casests,1))
Casests_ma=ma(Casets1,7)
df1$DailyCases=as.vector(Casets1)
df1$Cases_ma=as.vector(Casests_ma)
Casests
Casests <- ts(df1$Cases, start=yr_mt_da,frequency=365.25)
Casets1=c(Casests[1],diff(Casests,1))
Casests_ma=ma(Casets1,7)
df1$DailyCases=as.vector(Casets1)
df1$Cases_ma=as.vector(Casests_ma)
View(df1)
Deathsts <- ts(df1$Deaths, start=yr_mt_da,frequency=365.25)
Deathsts1=c(Deathsts[1],diff(Deathsts,1))
Deathsts_ma=ma(Deathsts1,7)
df1$DailyDeaths=as.vector(Deathsts1)
df1$Deaths_ma=as.vector(Deathsts_ma)
View(df1)
SumStats=describe(df1,na.rm=TRUE,trim=0.1,quant=c(.25,.75))
write.csv(SumStats,paste0("../Results/",df1$Date[nrow(df1)],"/Summary_Statistics.csv"))
write.csv(df1,"../Data/Processed/Cleandata.csv")
head(df1,5)
d=0.05
h=10
k=round(nrow(df1)*d)
l=nrow(df1)-k
train=df1[1:l,]
test=df1[(l+1):nrow(df1),]
freq=365.25
Allcases_train=TSConvert(train,"Cases_ma",freq)
Allcases_test=TSConvert(test,"Cases_ma",freq)
AllCases=c(Allcases_train,Allcases_test)
fit1=nnetar(Allcases_train,p=7,Size=10,repeats=50,lambda = "auto")
for1=forecast(fit1,k)
autoplot(for1)
predictions1=for1$mean
autoplot(predictions1)
fit2=nnetar(Allcases_train)
for2=forecast(fit2,k)
autoplot(for2)
predictions2=for2$mean
autoplot(predictions2)
fit3=auto.arima(Allcases_train)
for3=forecast(fit3,h=k)
autoplot(for3)
predictions3=for3$mean
autoplot(predictions3)
fit4=arima(Allcases_train,order=c(4,0,1))
for4=forecast(fit4,k)
autoplot(for4)
predictions4=for4$mean
autoplot(predictions4)
results=data.frame(Date=test$Date,Test=test$Cases_ma,PredNN=as.vector(predictions1),
PredAutoNN=as.vector(predictions2),PredAutoARIMA=as.vector(predictions3),
PredARIMA=as.vector(predictions4))
results$Ensemble1=rowMeans(results[,c(4,5)])
results$Ensemble2=rowMeans(results[,3:6])
head(results,5)
p1=ggplot() +
geom_line(data=df1, aes(x = Date, y = Cases_ma, colour = "Actual Values"))+
geom_line(data = results, aes(x = Date, y = Test, colour = "Actual Values")) +
geom_line(data = results, aes(x = Date, y = PredNN,   colour = "Predictions NN"))  +
geom_line(data = results, aes(x = Date, y = PredARIMA,   colour = "Predictions ARIMA"))  +
geom_line(data = results, aes(x = Date, y = PredAutoARIMA,   colour = "Predictions Auto ARIMA"))  +
geom_line(data = results, aes(x = Date, y = PredAutoNN,   colour = "Predictions Auto Neural Network"))  +
geom_line(data = results, aes(x = Date, y = Ensemble1,   colour = "Predictions Ensamble1"))  +
geom_line(data = results, aes(x = Date, y = Ensemble2,   colour = "Predictions Ensamble2"))  +
ylab('Cases')+
scale_x_date(breaks = "1 month",date_labels="%b")+
#scale_x_date(breaks=df1$Date ,labels=format(df1$Date,format="%m-%d"))+
ggtitle(paste0("Comparison of Predicted vs True Number of Smoothed (7) Cases for ",round(nrow(df1)*d)," days"))+
theme(axis.text.x = element_text(angle=45, hjust = 1))
ggsave(paste0("../Results/",df1$Date[nrow(df1)],"/Predictions_vs_Test_days_",k,"_Cases.jpg"),p1,width=10,heigh=8)
p1
RMSE=matrix(0,nrow=1,ncol = ncol(results)-2)
RMSE=as.data.frame(RMSE)
colnames(RMSE)=colnames(results[,3:ncol(results)])
for (i in 1:ncol(RMSE)){
RMSE[1,i]=rmse(results[,2],results[,i+2],na.rm=TRUE)
}
write.csv(RMSE,paste0("../Results/",df1$Date[nrow(df1)],"/Smoothed_7_RMSE_days_",k,"_Cases.csv"))
RMSE
geom.text.size = 4
theme.size = (14/5) * geom.text.size
Lck=as.Date("2020-03-22")
Ph2=Lck+74
Msk=Lck+111
ScOpen=Lck+151
Ph3=Lck+177
MPh2=Lck+248
Vac=Lck+288
Ph3N=Lck+346
p1=ggplot(df1, aes(x=Date, y=Cases_ma)) +
geom_point(size=0.5)+
geom_line(data=df1, aes(x = Date, y = Cases_ma, colour = "Actual Values"))+
geom_line(data=results, aes(x = Date, y = PredARIMA, colour = "ARIMA Predictions"))+
geom_text(x=Lck, y=1800, label="Lockdown",colour="red",size=geom.text.size)+
geom_vline(xintercept=Lck, linetype=4,colour="red")+
geom_text(x=Ph2, y=1000, label="Phase 2 Reopening",colour="green",size=geom.text.size)+
geom_vline(xintercept=Ph2, linetype=4,colour="green")+
geom_text(x=Msk, y=1500, label="Mask Mandate",colour="red",size=geom.text.size)+
geom_vline(xintercept=Msk, linetype=4,colour="red")+
geom_text(x=ScOpen, y=1300, label="Schools Open",colour="green",size=geom.text.size)+
geom_vline(xintercept=ScOpen, linetype=4,colour="green")+
geom_text(x=Ph3, y=300, label="Phase 3 Reopening",colour="green",size=geom.text.size)+
geom_vline(xintercept=Ph3, linetype=4,colour="green")+
geom_text(x=MPh2, y=1100, label="Modified Phase 2",colour="green",size=geom.text.size)+
geom_vline(xintercept=MPh2, linetype=4,colour="green")+
geom_text(x=Vac, y=800, label="Vaccinations Started",colour="red",size=geom.text.size)+
geom_vline(xintercept=Vac, linetype=4,colour="red")+
geom_text(x=Ph3N, y=1100, label="Phase 3",colour="green",size=geom.text.size)+
geom_vline(xintercept=Ph3N, linetype=4,colour="green")+
scale_x_date(breaks = "1 month",date_labels="%b")+
ylab("Daily Cases")+
ggtitle(paste0("MA(7) Smoothed Timeseries of Covid19 Cases in Louisiana with ",h," days prediction"))+
theme_bw()+
theme(axis.text = element_text(size = theme.size, colour="black"))+
theme(legend.title = element_blank())
fitfinal = auto.arima(AllCases)
forfinal = forecast(fitfinal, h = 7)
autoplot(forfinal)
predictionsfinal=forfinal$mean
autoplot(predictionsfinal)
