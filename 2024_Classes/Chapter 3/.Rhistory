hist(data,xlab = glue("Hwy Class: {i}"), main = class_desc,
xlim = c(x_min-0.1*x_min,x_max+0.1*x_max))
abline(v = old_cutoffs_merge[old_cutoffs_merge$code == i,]$cutoff1, col='red', lwd=2)
abline(v = old_cutoffs_merge[old_cutoffs_merge$code == i,]$cutoff2, col='red', lwd=2)
abline(v = quantile(data, probs = 0.25), col = 'blue', lwd=2)
abline(v = quantile(data, probs = 0.75), col = 'blue', lwd=2)
abline(v = quantile(data, probs = 1/3), col = 'green', lwd=2)
abline(v = quantile(data, probs = 2/3), col = 'green', lwd=2)
text(count_seg)
legend('topright',legend=c('Cutoffs','Quartiles','33rd and 66th'), col=c('red','blue','green'), lty=1, lwd = 2)
}
}
old_hwy_classes<-unique(df_old$HighwayClassCode)
df_old <- read_csv("C:/Users/malle72/projects/AADT Cutoffs/Old Hwy Class AADT.csv")
library(tidyverse)
df_old <- read_csv("C:/Users/malle72/projects/AADT Cutoffs/Old Hwy Class AADT.csv")
old_hwy_classes<-unique(df_old$HighwayClassCode)
old_hwy_classes = sort(old_hwy_classes)
hwy_counts<- df_old %>% count(description)
old_cutoffs_merge <- merge(old_cutoffs,codes_and_desc, by.x = 'HighwayClass', by.y = 'description', all.x = T)
library(MASS)
pbinom
library(ggstatsplot)
warning()
warnings()
source("~/.active-rstudio-document")
library(tidyverse)
install.packages("tsibble")
source("~/.active-rstudio-document")
library(tsibble)
source("~/.active-rstudio-document")
View(y)
y
olympic_running
tourism
install.packages("fpp3")
install.packages("fpp3")
install.packages("fpp3")
library(fpp3)
install.packages(fpp3)
install.package(fpp3)
install.packages('fpp3')
install.packages('fabletools')
install.packages('Rtools')
install.packages("Rtools")
pwd
pwd()
getwd()
install.packages('fpp3')
library(fpp3)
PBS
PBS |>
filter(ATC2 == "A10")
PBS |>
filter(ATC2 == "A10") |>
select(Month, Concession, Type, Cost)
source("~/.active-rstudio-document", echo=TRUE)
aus_arrivals |>
gg_season(Arrivals)
library(fpp3)
aus_arrivals |>
gg_season(Arrivals)
aus_arrivals |>
gg_season(Arrivals, polar = TRUE)
aus_arrivals |>
gg_season(Arrivals,period = 'year')
# ====Seasonal Plots====
a10 |>
gg_season(Cost, labels='both') +
labs(y = "$ (millions)",
title = "Seasonal plot: Antidiabetic drug sales")
# ===== Pharmacy Data =====
PBS |>
filter(ATC2 == "A10") |>
select(Month, Concession, Type, Cost) |>
summarise(TotalC = sum(Cost)) |>
mutate(Cost = TotalC / 1e6) -> a10
a10 |>
autoplot() +
geom_point() +
labs(y= "$ (millions)",
title = "australian antidiabetic drug sales")
# ====Seasonal Plots====
a10 |>
gg_season(Cost, labels='both') +
labs(y = "$ (millions)",
title = "Seasonal plot: Antidiabetic drug sales")
vic_elec |> gg_season(Demand)
vic_elec |> gg_season(Demand,period='day')
library(readxl)
crashes <- read_excel("C:/Users/malle72/projects/TimeSeries_fpp3_2024/EBR Daily by Hwy Class.xlsx",
col_types = c("date", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric"))
View(crashes)
# convert tibble to tsibble (daily)
crashes_d <- crashes |>
mutate(CrashDate = ymd(CrashDate)) |>
as_tsibble(index = CrashDate, key = HighwayClass)
library(fpp3)
# convert tibble to tsibble (daily)
crashes_d <- crashes |>
mutate(CrashDate = ymd(CrashDate)) |>
as_tsibble(index = CrashDate, key = HighwayClass)
# convert tibble to tsibble (monthly)
crashes_m <- crashes |>
mutate(Month = yearmonth(CrashDate)) |>
group_by(Month, HighwayClass) |>
summarise(
Crashes = sum(Crashes),
Pedestrian = sum(Pedestrian),
Bicycle = sum(Bicycle),
NonMotorist = sum(NonMotorist),
Motorcycle = sum(Motorcycle),
Fatal = sum(Fatal)
) |>
as_tsibble(index = Month, key = HighwayClass)
View(crashes_d)
View(crashes_m)
# renaming column Crashes -> crashCount
crashes_d <- mutate(crashes_d, crashCount = Crashes)
crashes_m <- mutate(crashes_m, crashCount = Crashes)
# removing old instance of renamed column
crashes_d <- select(crashes_d, -Crashes)
crashes_m <- select(crashes_m, -Crashes)
# Summarise total crashes
summarise(crashes_d, TotalCrashes = sum(crashCount))
# Create calculated field
crashes_d = crashes_d |>
mutate(PercentFatal = Fatal/crashCount)
crashes_m = crashes_m |>
mutate(PercentFatal = Fatal/crashCount)
crashes_m |>
autoplot(PercentFatal)
crashes_d |>
gg_season(Fatal, period='year')
crashes_m |>
gg_subseries(crashCount)
crashes_m |>
fill_gaps() |>
gg_subseries(crashCount)
crashes_d |>
fill_gaps() |>
gg_season(Fatal)
# Summarise total crashes
summarise(crashes_d, TotalCrashes = sum(crashCount))
summarise(crashes_m, sum(crashCount), by=HighwayClass)
# need to filter down to fewer hwy classes
#  remove ones with very few crashes
crashes_m |>
as_tibble() |>
summarise(sum(crashCount), by=HighwayClass)
# need to filter down to fewer hwy classes
#  remove ones with very few crashes
crashes_m |>
as_tibble() |>
summarise(sum(crashCount), .groups=HighwayClass)
# need to filter down to fewer hwy classes
#  remove ones with very few crashes
crashes_m |>
as_tibble() |>
summarise(sum(crashCount), by=HighwayClass, .groups=HighwayClass)
# need to filter down to fewer hwy classes
#  remove ones with very few crashes
crashes_m |>
as_tibble() |>
summarise(sum(crashCount), by=HighwayClass, .groups=crashes_m$HighwayClass)
crashes_m |>
as_tibble()
# need to filter down to fewer hwy classes
#  remove ones with very few crashes
crashes_m |>
as_tibble() |>
ungroup() |>
summarise(sum(crashCount), by=HighwayClass)
# need to filter down to fewer hwy classes
#  remove ones with very few crashes
crashes_m |>
as_tibble() |>
ungroup() |>
reframe(sum(crashCount), by=HighwayClass)
# need to filter down to fewer hwy classes
#  remove ones with very few crashes
crashes_m |>
as_tibble() |>
ungroup() |>
summarise(sum(crashCount), by=c(Month, HighwayClass))
crashes |>
summarise(Crashes, by=HighwayClas)
crashes |>
summarise(Crashes, by=HighwayClass)
crashes |>
summarise(sum(Crashes), by=HighwayClass)
crashes |>
group_by(HighwayClass) |>
summarise(sum(Crashes))
print(n=23)
crashes |>
group_by(HighwayClass) |>
summarise(sum(Crashes)) |>
print(n=23)
crashes_d |>
filter(! HighwayClass %in% c(23,29,31,42,6,11)) |>
fill_gaps() |>
gg_season(Fatal)
crashes_d |>
filter(! HighwayClass %in% c(23,29,31,42,6,11)) |>
fill_gaps() |>
gg_season(crashCount)
crashes_d |>
filter(! HighwayClass %in% c(23,29,31,42,6,11,9,NULL)) |>
fill_gaps() |>
gg_season(crashCount)
crashes |>
group_by(HighwayClass) |>
summarise(sum(Crashes)) |>
order() |>
print(n=23)
crashes |>
group_by(HighwayClass) |>
summarise(countCrash=sum(Crashes)) |>
order_by(countCrash)|>
print(n=23)
crashes |>
group_by(HighwayClass) |>
summarise(countCrash=sum(Crashes)) |>
order_by()|>
print(n=23)
crashes |>
group_by(HighwayClass) |>
summarise(countCrash=sum(Crashes)) |>
arrange()|>
print(n=23)
crashes |>
group_by(HighwayClass) |>
summarise(countCrash=sum(Crashes)) |>
arrange(desc(countCrash))|>
print(n=23)
crashes |>
group_by(HighwayClass) |>
summarise(countCrash=sum(Crashes)) |>
arrange(asc(countCrash))|>
print(n=23)
crashes |>
group_by(HighwayClass) |>
summarise(countCrash=sum(Crashes)) |>
arrange(countCrash)|>
print(n=23)
crashes_d |>
filter(! HighwayClass %in% c(6,31,42,29,23,11,9,19,33,4,NULL)) |>
fill_gaps() |>
gg_season(crashCount)
crashes_m |>
filter(! HighwayClass %in% c(6,31,42,29,23,11,9,19,33,4,NULL)) |>
fill_gaps() |>
gg_season(crashCount)
crashes_m |>
filter(! HighwayClass %in% c(6,31,42,29,23,11,9,19,33,4,'NULL')) |>
fill_gaps() |>
gg_season(crashCount)
crashes_d |>
filter(! HighwayClass %in% c(6,31,42,29,23,11,9,19,33,4,'NULL')) |>
fill_gaps() |>
gg_season(crashCount)
# Autocorrelation
crashes_d |>
filter(! HighwayClass %in% c(6,31,42,29,23,11,9,19,33,4,'NULL')) |>
fill_gaps() |>
ACF(crashCount)
# Lag
crashes_d |>
filter(! HighwayClass %in% c(6,31,42,29,23,11,9,19,33,4,'NULL')) |>
fill_gaps() |>
gg_lag(crashCount, geom = 'point')
fill_gaps() |>
gg_lag(crashCount, geom = 'point')
# Lag
crashes_d |>
filter(HighwayClass = 22)
fill_gaps() |>
gg_lag(crashCount, geom = 'point')
# Lag
crashes_d |>
filter(HighwayClass == 22)
# Lag
crashes_d |>
filter(HighwayClass == 22) |>
gg_lag(crashCount, geom = 'point')
# Lag
crashes_m |>
filter(HighwayClass == 22) |>
gg_lag(crashCount, geom = 'point')
# Lag
crashes_m |>
filter(HighwayClass == 22) |>
gg_lag(crashCount, geom = 'point')
rlang::last_trace()
crashes_m |>
filter(HighwayClass == 22)
recent_production <- aus_production |>
filter(year(Quarter) >= 2000)
View(recent_production)
# Lag
crashes_d |>
filter(HighwayClass == 22) |>
gg_lag(crashCount, geom = 'point')
crashes_d |>
filter(HighwayClass == 22)
crashes_m |>
filter(HighwayClass == 22) |>
ungroup |>
gg_lag(crashCount, geom = 'point')
crashes_m |>
filter(HighwayClass == 22) |>
ungroup() |>
gg_lag(crashCount, geom = 'point')
crashes_m |>
filter(HighwayClass == 22) |>
ungroup() |>
gg_lag(crashCount, geom = 'point', lags = 12)
recent_production |>
gg_lag(Beer, geom = "point") +
labs(x = "lag(Beer, k)")
# Autocorrelation
crashes_d |>
filter(HighwayClass == 22) |>
fill_gaps() |>
ACF(crashCount)
# Autocorrelation
crashes_d |>
filter(HighwayClass == 22) |>
fill_gaps() |>
ACF(crashCount) |>
autoplot()
crashes_m |>
filter(HighwayClass == 22) |>
fill_gaps() |>
ACF(crashCount) |>
autoplot()
# Lag
crashes_d |>
filter(HighwayClass == 20) |>
gg_lag(crashCount, geom = 'point')
crashes_m |>
filter(HighwayClass == 20) |>
ungroup() |>
gg_lag(crashCount, geom = 'point', lags = 12)
crashes_m |>
filter(HighwayClass == 20) |>
ungroup() |>
gg_lag(crashCount, geom = 'point')
crashes_m |>
filter(HighwayClass == 20) |>
ungroup() |>
gg_lag(crashCount, geom = 'point', lags = 1:12)
# Autocorrelation
crashes_d |>
filter(HighwayClass == 20) |>
fill_gaps() |>
ACF(crashCount) |>
autoplot()
crashes_m |>
filter(HighwayClass == 20) |>
fill_gaps() |>
ACF(crashCount) |>
autoplot()
crashes_m |>
filter(HighwayClass == 20) |>
fill_gaps() |>
ACF(crashCount, lag_max = 12) |>
autoplot()
aus_arrivals |>
gg_subseries(Arrivals)
recent_production |>
gg_lag(Beer, geom = "point") +
labs(x = "lag(Beer, k)")
# ====Lag Plots====
recent_production <- aus_production |>
filter(year(Quarter) >= 2000)
recent_production |>
gg_lag(Beer, geom = "point") +
labs(x = "lag(Beer, k)")
crashes_m |>
filter(HighwayClass == 20) |>
ungroup() |>
gg_lag(crashCount, geom = 'point', lags = 1:12)
library(readr)
library(readxl)
# 5
tourism2 <- read_excel('exercises/tourism.xlsx')
pwd()
gwd()
getwd
getwd()
setwd("C:/Users/malle72/projects/TimeSeries_fpp3_2024/Chapter 2")
# 5
tourism2 <- read_excel('exercises/tourism.xlsx')
View(tourism2)
View(tourism)
tourism
tourism2 <- tourism2 |>
mutate(Quarter = yearquarter(Quarter)) |>
as_tsibble(key=c(Region, State, Purpose), index=Quarter)
tourism2
# 7
set.seed(8675309)
my_retail <- aus_retail |>
filter(`Series ID` == sample(aus_retail$`Series ID`,1))
View(my_retail)
aus_retail
my_retail |>
autoplot(Turnover)
my_retail |>
gg_season(Turnover)
my_retail |>
gg_subseries(Turnover)
View(aus_retail)
my_retail |>
gg_lag()
my_retail |>
gg_lag(Turnover)
my_retail |>
gg_lag(Turnover,lags=1:12)
my_retail |>
gg_lag(Turnover,lags=1:12, geom = 'points')
my_retail |>
gg_lag(Turnover,lags=1:12, geom = 'point')
my_retail |>
gg_lag(Turnover,lags=1:12)
my_retail |>
ACF() |>
autoplot()
my_retail |>
ACF(Turnover) |>
autoplot()
my_retail |>
gg_season(Turnover) +
abline(v='Jan 2012')
my_retail |>
autoplot(Turnover)+
abline(v='Jan 2012')
my_retail |>
autoplot(Turnover)+
geom_vline('Jan 2012')
my_retail |>
autoplot(Turnover) +
geom_vline(xintercept='2012 Jan')
my_retail |>
autoplot(Turnover) +
geom_vline(xintercept='2012 Jan')
my_retail |>
autoplot(Turnover) +
geom_vline(xintercept=yearmonth('2012 Jan'))
my_retail |>
autoplot(Turnover) +
geom_vline(xintercept=month('2012 Jan'))
my_retail |>
autoplot(Turnover) +
geom_vline(xintercept=yearmonth('2012 Jan', abbr=TRUE))
gg_lag(Turnover,lags=1:12)
my_retail |>
filter(year(Month) >= 2012) |>
gg_lag(Turnover,lags=1:12)
my_retail |>
filter(year(Month) >= 2012) |>
ACF(Turnover) |>
autoplot()
setwd("C:/Users/malle72/projects/TimeSeries_fpp3_2024/Chapter 3")
# GDP per capita
global_economy |>
filter(Country=="Australia") |>
autoplot(GDP/population)
# GDP per capita
global_economy |>
filter(Country=="Australia") |>
autoplot(GDP/Population)
# Retail CPI
print_retail <- aus_retail |>
filter(Industry == "Newspaper and book retailing") |>
group_by(Industry) |>
index_by(Year = year(Month)) |>
summarise(Turnover = sum(Turnover))
print_retail |>
autoplot(Turnover)
aus_economy <- global_economy |>
filter(Code =='AUS')
print_retail |>
left_join(aus_economy, by='Year') |>
mutate(Adjusted_turnover = Turnover / CPI *100) |>
pivot_longer(c(Turnover, Adjusted_turnover), values_to = 'Turnover') |>
mutate(name = factor(name,levels = c('Turnover','Adjusted_turnover'))) |>
ggplot(aes(x=Year,y=Turnover)) +
geom_line()+
facet_grid(name ~ ., scales = 'free_y') +
labs(title = "Turnover: Australian preint media industry", y="$AU")
food <- aus_retail |>
filter(Industry =='Food retailing) |>
summarise(Turnover = sum(Turnover')
summarise(Turnover = sum(Turnover)
food <- aus_retail |>
food <- aus_retail |>
filter(Industry == 'Food retailing') |>
summarise(Turnover = sum(Turnover))
food |> autoplot(Turnover)
food |> autoplot(sqrt(Turnover))
food |> autoplot(Turnover^1/3)
food |> autoplot(log(Turnover))
food |> autoplot(Turnover^-1)
food |> autoplot(-1/Turnover)
food |>
features(Turnover, features = guerrero)
food |> autoplot(box_cox(Turnover, 0.0895))
